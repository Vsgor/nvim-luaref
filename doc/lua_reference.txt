
by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes

Copyright © 2006--2012 Lua.org, PUC-Rio. Freely available under the
terms of the Lua license: https://www.lua.org/license.html.

==============================================================================
TABLE OF CONTENTS                                          *lua_reference_toc*

1      - Introduction                            |lua_introduction|

2      - The Language                            |lua_language|
2.1    - Lexical Conventions                     |lua_conventions|
2.2    - Values and Types                        |lua_types|
2.2.1  - Coercion                                |lua_type_coercion|
2.3    - Variables                               |lua_variables|

2.4    - Statements                              |lua_statements|
2.4.1  - Chunks                                  |lua_chunks|
2.4.2  - Blocks                                  |lua_blocks|
2.4.3  - Assignment                              |lua_assignment|
2.4.4  - Control Structures                      |lua_control|
2.4.5  - For Statement                           |lua_for|
2.4.6  - Function Calls as Statements            |lua_func_statement|
2.4.7  - Local Declarations                      |lua_local|

2.5    - Expressions                             |lua_expressions|
2.5.1  - Arithmetic Operators                    |lua_arithmetic_ops|
2.5.2  - Relational Operators                    |lua_relational_ops|
2.5.3  - Logical Operators                       |lua_logical_ops|
2.5.4  - Concatenation                           |lua_concatenation|
2.5.5  - The Length Operator                     |lua_len|
2.5.6  - Precedence                              |lua_precedence|
2.5.7  - Table Constructors                      |lua_table_constructors|
2.5.8  - Function Calls                          |lua_function_calls|
2.5.9  - Function Definitions                    |lua_function_defs|

2.6    - Visibility Rules                        |lua_scope|
2.7    - Error Handling                          |lua_errors|
2.8    - Metatables                              |lua_metatables|
2.9    - Environments                            |lua_environments|

2.10   - Garbage Collection                      |lua_gc|
2.10.2 - Weak Tables                             |lua_weak|
2.11   - Coroutines                              |lua_coroutines|

5      - Standard Libraries                      |lua_stdlib|
5.1    - Basic Functions                         |lua_builtins|
5.2    - Coroutine Manipulation                  |lua_module_coroutines|
5.3    - Modules                                 |lua_modules|
5.4    - String Manipulation                     |lua_module_string|
5.4.1  - Patterns                                |lua_patterns|
5.5    - Table Manipulation                      |lua_module_table|
5.6    - Mathematical Functions                  |lua_module_math|
5.7    - Input and Output Facilities             |lua_module_io|
5.8    - Operating System Facilities             |lua_module_os|
5.9    - The Debug Library                       |lua_debug|

8      - The Complete Syntax of Lua              |lua_syntax|

==============================================================================
TRANSLATIONS                                      *lua_reference_translations*

In order to use a translated doc, move the appropriate language from the
`translations/` directory to the `doc/` directory. Assuming you are in this
help file in a vim buffer: >
    !mv %:h:h/translations/lua_reference.XXx tags-XX %:h
<
Where `XX` the two letter language code for the language you want to use.
Currently available are: `es`, `de`, and `pt`, (spanish, german, and portuguese
respectively).

If you do not want the english version, replace the english files with the
version you prefer.

==============================================================================
INTRODUCTION                                                *lua_introduction*

Lua is an extension programming language designed to support general
procedural programming with data description facilities. It also offers
good support for object-oriented programming, functional programming,
and data-driven programming. Lua is intended to be used as a powerful,
light-weight scripting language for any program that needs one. Lua is
implemented as a library, written in `clean` C (that is, in the common
subset of ANSI C and C++).

Being an extension language, Lua has no notion of a "main" program: it
only works `embedded` in a host client, called the `embedding program`
or simply the `host`. This host program can invoke functions to execute
a piece of Lua code, can write and read Lua variables, and can register
C functions to be called by Lua code. Through the use of C functions,
Lua can be augmented to cope with a wide range of different domains,
thus creating customized programming languages sharing a syntactical
framework. The Lua distribution includes a sample host program called
`lua`, which uses the Lua library to offer a complete, stand-alone Lua
interpreter.

Lua is free software, and is provided as usual with no guarantees, as
stated in its license. The implementation described in this manual is
available at Lua's official web site, www.lua.org.

Like any other reference manual, this document is dry in places. For a
discussion of the decisions behind the design of Lua, see the technical
papers available at Lua's web site. For a detailed introduction to
programming in Lua, see Roberto's book, /Programming in Lua (Second
Edition)/.

==============================================================================
THE LANGUAGE                                                    *lua_language*

This section describes the lexis, the syntax, and the semantics of Lua.
In other words, this section describes which tokens are valid, how they
can be combined, and what their combinations mean.

The language constructs will be explained using the usual extended BNF
notation, in which {`a`} means 0 or more `a`'s, and [`a`] means an
optional `a`. Non-terminals are shown like non-terminal, keywords are
shown like `kword`, and other terminal symbols are shown like ``=`´. The
complete syntax of Lua can be found in |lua_syntax| at the end of this
manual.

==============================================================================
LEXICAL CONVENTIONS                                          *lua_conventions*

`Names` (also called `identifiers`) in Lua can be any string of letters,
digits, and underscores, not beginning with a digit. This coincides with
the definition of names in most languages. (The definition of letter
depends on the current locale: any character considered alphabetic by
the current locale can be used in an identifier.) Identifiers are used
to name variables and table fields.

The following `keywords` are reserved and cannot be used as names:
>
         and       break     do        else      elseif
         end       false     for       function  if
         in        local     nil       not       or
         repeat    return    then      true      until     while
<
Lua is a case-sensitive language: `and` is a reserved word, but `And`
and `AND` are two different, valid names. As a convention, names
starting with an underscore followed by uppercase letters (such as
|_VERSION|) are reserved for internal global
variables used by Lua.

The following strings denote other tokens:
>
         +     -     *     /     %     ^     #
         ==    ~=    <=    >=    <     >     =
         (     )     {     }     [     ]
         ;     :     ,     .     ..    ...
<
`Literal strings` can be delimited by matching single or double quotes,
and can contain the following C-like escape sequences: '`\a`' (bell),
'`\b`' (backspace), '`\f`' (form feed), '`\n`' (newline), '`\r`'
(carriage return), '`\t`' (horizontal tab), '`\v`' (vertical tab),
'`\\`' (backslash), '`\"`' (quotation mark [double quote]), and '`\'`'
(apostrophe [single quote]). Moreover, a backslash followed by a real
newline results in a newline in the string. A character in a string can
also be specified by its numerical value using the escape sequence
`\ddd`, where `ddd` is a sequence of up to three decimal digits. (Note
that if a numerical escape is to be followed by a digit, it must be
expressed using exactly three digits.) Strings in Lua can contain any
8-bit value, including embedded zeros, which can be specified as '`\0`'.

Literal strings can also be defined using a long format enclosed by
`long brackets`. We define an `opening long bracket of level `n`` as an
opening square bracket followed by `n` equal signs followed by another
opening square bracket. So, an opening long bracket of level 0 is
written as `[[`, an opening long bracket of level 1 is written as `[`[=,
and so on. A `closing long bracket` is defined similarly; for instance,
a closing long bracket of level 4 is written as `]`===]=. A long string
starts with an opening long bracket of any level and ends at the first
closing long bracket of the same level. Literals in this bracketed form
can run for several lines, do not interpret any escape sequences, and
ignore long brackets of any other level. They can contain anything
except a closing bracket of the proper level.

For convenience, when the opening long bracket is immediately followed
by a newline, the newline is not included in the string. As an example,
in a system using ASCII (in which '`a`' is coded as 97, newline is coded
as 10, and '`1`' is coded as 49), the five literal strings below denote
the same string:
>
         a = 'alo\n123"'
         a = "alo\n123\""
         a = '\97lo\10\04923"'
         a = [[alo
         123"]]
         a = [==[
         alo
         123"]==]
<
A `numerical constant` can be written with an optional decimal part and
an optional decimal exponent. Lua also accepts integer hexadecimal
constants, by prefixing them with `0x`. Examples of valid numerical
constants are
>
         3   3.0   3.1416   314.16e-2   0.31416E1   0xff   0x56
<
A `comment` starts with a double hyphen (`--`) anywhere outside a
string. If the text immediately after `--` is not an opening long
bracket, the comment is a `short comment`, which runs until the end of
the line. Otherwise, it is a `long comment`, which runs until the
corresponding closing long bracket. Long comments are frequently used to
disable code temporarily.

==============================================================================
VALUES AND TYPES                                                   *lua_types*

Lua is a `dynamically typed language`. This means that variables do not
have types; only values do. There are no type definitions in the
language. All values carry their own type.

All values in Lua are `first-class values`. This means that all values
can be stored in variables, passed as arguments to other functions, and
returned as results.

There are eight basic types in Lua: `nil`, `boolean`, `number`,
`string`, `function`, `userdata`, `thread`, and `table`. `Nil` is the
type of the value `nil`, whose main property is to be different from any
other value; it usually represents the absence of a useful value.
`Boolean` is the type of the values `false` and `true`. Both `nil` and
`false` make a condition false; any other value makes it true. `Number`
represents real (double-precision floating-point) numbers. (It is easy
to build Lua interpreters that use other internal representations for
numbers, such as single-precision float or long integers; see file
`luaconf.h`.) `String` represents arrays of characters. Lua is 8-bit
clean: strings can contain any 8-bit character, including embedded zeros
('`\0`') (see |lua_conventions|).

Lua can call (and manipulate) functions written in Lua and functions
written in C (see |lua_function_calls|).

The type `userdata` is provided to allow arbitrary C data to be stored
in Lua variables. This type corresponds to a block of raw memory and has
no pre-defined operations in Lua, except assignment and identity test.
However, by using `metatables`, the programmer can define operations for
userdata values (see |lua_metatables|). Userdata values cannot be created
or modified in Lua, only through the C API. This guarantees the
integrity of data owned by the host program.

The type `thread` represents independent threads of execution and it is
used to implement coroutines (see |lua_coroutines|). Do not confuse Lua
threads with operating-system threads. Lua supports coroutines on all
systems, even those that do not support threads.

The type `table` implements associative arrays, that is, arrays that can
be indexed not only with numbers, but with any value (except `nil`).
Tables can be `heterogeneous`; that is, they can contain values of all
types (except `nil`). Tables are the sole data structuring mechanism in
Lua; they can be used to represent ordinary arrays, symbol tables, sets,
records, graphs, trees, etc. To represent records, Lua uses the field
name as an index. The language supports this representation by providing
`a.name` as syntactic sugar for `a["name"]`. There are several
convenient ways to create tables in Lua (see |lua_table_constructors|).

Like indices, the value of a table field can be of any type (except
`nil`). In particular, because functions are first-class values, table
fields can contain functions. Thus tables can also carry `methods` (see
|lua_function_defs|).

Tables, functions, threads, and (full) userdata values are `objects`:
variables do not actually `contain` these values, only `references` to
them. Assignment, parameter passing, and function returns always
manipulate references to such values; these operations do not imply any
kind of copy.

The library function |type| returns a string describing
the type of a given value.

==============================================================================
COERCION                                                   *lua_type_coercion*

Lua provides automatic conversion between string and number values at
run time. Any arithmetic operation applied to a string tries to convert
this string to a number, following the usual conversion rules.
Conversely, whenever a number is used where a string is expected, the
number is converted to a string, in a reasonable format. For complete
control over how numbers are converted to strings, use the `format`
function from the string library (see
|string.format|).

==============================================================================
VARIABLES                                                      *lua_variables*

Variables are places that store values. There are three kinds of
variables in Lua: global variables, local variables, and table fields.

A single name can denote a global variable or a local variable (or a
function's formal parameter, which is a particular kind of local
variable):
>
        var ::= Name
<
Name denotes identifiers, as defined in |lua_conventions|.

Any variable is assumed to be global unless explicitly declared as a
local (see |lua_local|). Local variables are `lexically scoped`:
local variables can be freely accessed by functions defined inside their
scope (see |lua_scope|).

Before the first assignment to a variable, its value is `nil`.

Square brackets are used to index a table:
>
        var ::= prefixexp `[´ exp `]´
<
The meaning of accesses to global variables and table fields can be
changed via metatables. An access to an indexed variable `t[i]` is
equivalent to a call `gettable_event(t,i)`. (See |lua_metatables| for a
complete description of the `gettable_event` function. This function is
not defined or callable in Lua. We use it here only for explanatory
purposes.)

The syntax `var.Name` is just syntactic sugar for `var["Name"]`:
>
        var ::= prefixexp `.´ Name
<
All global variables live as fields in ordinary Lua tables, called
`environment tables` or simply `environments` (see |lua_environments|). Each
function has its own reference to an environment, so that all global
variables in this function will refer to this environment table. When a
function is created, it inherits the environment from the function that
created it. To get the environment table of a Lua function, you call
|getfenv|. To replace it, you call
|setfenv|. (You can only manipulate the environment of
C functions through the debug library; (see |lua_debug|).)

An access to a global variable `x` is equivalent to `_env.x`, which in
turn is equivalent to
>
         gettable_event(_env, "x")
<
where `_env` is the environment of the running function. (See
|lua_metatables| for a complete description of the `gettable_event`
function. This function is not defined or callable in Lua. Similarly,
the `_env` variable is not defined in Lua. We use them here only for
explanatory purposes.)

==============================================================================
STATEMENTS                                                    *lua_statements*

Lua supports an almost conventional set of statements, similar to those
in Pascal or C. This set includes assignments, control structures,
function calls, and variable declarations.

==============================================================================
CHUNKS                                                            *lua_chunks*

The unit of execution of Lua is called a `chunk`. A chunk is simply a
sequence of statements, which are executed sequentially. Each statement
can be optionally followed by a semicolon:
>
        chunk ::= {stat [`;´]}
<
There are no empty statements and thus '`;;`' is not legal.

Lua handles a chunk as the body of an anonymous function with a variable
number of arguments (see |lua_function_defs|). As such, chunks can define
local variables, receive arguments, and return values.

A chunk can be stored in a file or in a string inside the host program.
To execute a chunk, Lua first pre-compiles the chunk into instructions
for a virtual machine, and then it executes the compiled code with an
interpreter for the virtual machine.

Chunks can also be pre-compiled into binary form; see program `luac` for
details. Programs in source and compiled forms are interchangeable; Lua
automatically detects the file type and acts accordingly.

==============================================================================
BLOCKS                                                            *lua_blocks*

A block is a list of statements; syntactically, a block is the same as a
chunk:
>
        block ::= chunk
<
A block can be explicitly delimited to produce a single statement:
>
        stat ::= do block end
<
Explicit blocks are useful to control the scope of variable
declarations. Explicit blocks are also sometimes used to add a `return`
or `break` statement in the middle of another block (see
|lua_control|).

==============================================================================
ASSIGNMENT                                                    *lua_assignment*

Lua allows multiple assignments. Therefore, the syntax for assignment
defines a list of variables on the left side and a list of expressions
on the right side. The elements in both lists are separated by commas:
>
        stat ::= varlist `=´ explist
        varlist ::= var {`,´ var}
        explist ::= exp {`,´ exp}
<
Expressions are discussed in |lua_expressions|.

Before the assignment, the list of values is `adjusted` to the length of
the list of variables. If there are more values than needed, the excess
values are thrown away. If there are fewer values than needed, the list
is extended with as many `nil`'s as needed. If the list of expressions
ends with a function call, then all values returned by that call enter
the list of values, before the adjustment (except when the call is
enclosed in parentheses; see |lua_expressions|).

The assignment statement first evaluates all its expressions and only
then are the assignments performed. Thus the code
>
         i = 3
         i, a[i] = i+1, 20
<
sets `a[3]` to 20, without affecting `a[4]` because the `i` in `a[i]` is
evaluated (to 3) before it is assigned 4. Similarly, the line
>
         x, y = y, x
<
exchanges the values of `x` and `y`, and
>
         x, y, z = y, z, x
<
cyclically permutes the values of `x`, `y`, and `z`.

The meaning of assignments to global variables and table fields can be
changed via metatables. An assignment to an indexed variable
=t[i] = val= is equivalent to `settable_event(t,i,val)`. (See
|lua_metatables| for a complete description of the `settable_event`
function. This function is not defined or callable in Lua. We use it
here only for explanatory purposes.)

An assignment to a global variable =x = val= is equivalent to the
assignment =_env.x = val=, which in turn is equivalent to
>
         settable_event(_env, "x", val)
<
where `_env` is the environment of the running function. (The `_env`
variable is not defined in Lua. We use it here only for explanatory
purposes.)

==============================================================================
CONTROL STRUCTURES                                               *lua_control*

The control structures `if`, `while`, and `repeat` have the usual
meaning and familiar syntax:
>
        stat ::= while exp do block end
        stat ::= repeat block until exp
        stat ::= if exp then block {elseif exp then block} [else block] end
<
Lua also has a `for` statement, in two flavors (see |lua_for|).

The condition expression of a control structure can return any value.
Both `false` and `nil` are considered false. All values different from
`nil` and `false` are considered true (in particular, the number 0 and
the empty string are also true).

In the `repeat`--`until` loop, the inner block does not end at the
`until` keyword, but only after the condition. So, the condition can
refer to local variables declared inside the loop block.

The `return` statement is used to return values from a function or a
chunk (which is just a function). Functions and chunks can return more
than one value, and so the syntax for the `return` statement is
>
        stat ::= return [explist]
<
The `break` statement is used to terminate the execution of a `while`,
`repeat`, or `for` loop, skipping to the next statement after the loop:
>
        stat ::= break
<
A `break` ends the innermost enclosing loop.

The `return` and `break` statements can only be written as the `last`
statement of a block. If it is really necessary to `return` or `break`
in the middle of a block, then an explicit inner block can be used, as
in the idioms `do return end` and `do break end`, because now `return`
and `break` are the last statements in their (inner) blocks.

==============================================================================
FOR STATEMENT                                                        *lua_for*

The `for` statement has two forms: one numeric and one generic.

The numeric `for` loop repeats a block of code while a control variable
runs through an arithmetic progression. It has the following syntax:
>
        stat ::= for Name `=´ exp `,´ exp [`,´ exp] do block end
<
The `block` is repeated for `name` starting at the value of the first
`exp`, until it passes the second `exp` by steps of the third `exp`.
More precisely, a `for` statement like
>
         for v = e1, e2, e3 do block end
<
is equivalent to the code:
>
         do
           local var, limit, step = tonumber(e1), tonumber(e2), tonumber(e3)
           if not (var and limit and step) then error() end
           while (step > 0 and var <= limit) or (step <= 0 and var >= limit) do
             local v = var
             block
             var = var + step
           end
         end
<
Note the following:

- All three control expressions are evaluated only once, before the loop
  starts. They must all result in numbers.
- `var`, `limit`, and `step` are invisible variables. The names shown
  here are for explanatory purposes only.
- If the third expression (the step) is absent, then a step of 1 is
  used.
- You can use `break` to exit a `for` loop.
- The loop variable `v` is local to the loop; you cannot use its value
  after the `for` ends or is broken. If you need this value, assign it
  to another variable before breaking or exiting the loop.

The generic `for` statement works over functions, called `iterators`. On
each iteration, the iterator function is called to produce a new value,
stopping when this new value is `nil`. The generic `for` loop has the
following syntax:
>
        stat ::= for namelist in explist do block end
        namelist ::= Name {`,´ Name}
<
A `for` statement like
>
         for var_1, ···, var_n in explist do block end
<
is equivalent to the code:
>
         do
           local f, s, var = explist
           while true do
             local var_1, ···, var_n = f(s, var)
             var = var_1
             if var == nil then break end
             block
           end
         end
<
Note the following:

- `explist` is evaluated only once. Its results are an `iterator`
  function, a `state`, and an initial value for the first /iterator
  variable/.
- `f`, `s`, and `var` are invisible variables. The names are here for
  explanatory purposes only.
- You can use `break` to exit a `for` loop.
- The loop variables `var_i` are local to the loop; you cannot use their
  values after the `for` ends. If you need these values, then assign
  them to other variables before breaking or exiting the loop.

==============================================================================
FUNCTION CALLS AS STATEMENTS                              *lua_func_statement*

To allow possible side-effects, function calls can be executed as
statements:
>
        stat ::= functioncall
<
In this case, all returned values are thrown away. Function calls are
explained in |lua_function_calls|.

==============================================================================
LOCAL DECLARATIONS                                                 *lua_local*

Local variables can be declared anywhere inside a block. The declaration
can include an initial assignment:
>
        stat ::= local namelist [`=´ explist]
<
If present, an initial assignment has the same semantics of a multiple
assignment (see |lua_assignment|). Otherwise, all variables are
initialized with `nil`.

A chunk is also a block (see |lua_chunks|), and so local variables
can be declared in a chunk outside any explicit block. The scope of such
local variables extends until the end of the chunk.

The visibility rules for local variables are explained in
|lua_scope|.

==============================================================================
EXPRESSIONS                                                  *lua_expressions*

The basic expressions in Lua are the following:
>
        exp ::= prefixexp
        exp ::= nil | false | true
        exp ::= Number
        exp ::= String
        exp ::= function
        exp ::= tableconstructor
        exp ::= `...´
        exp ::= exp binop exp
        exp ::= unop exp
        prefixexp ::= var | functioncall | `(´ exp `)´
<
Numbers and literal strings are explained in |lua_conventions|; variables
are explained in |lua_variables|; function definitions are explained in
|lua_function_defs|; function calls are explained in |lua_function_calls|;
table constructors are explained in |lua_table_constructors|. Vararg
expressions, denoted by three dots ('`...`'), can only be used when
directly inside a vararg function; they are explained in
|lua_function_defs|.

Binary operators comprise arithmetic operators (see |lua_arithmetic_ops|),
relational operators (see |lua_relational_ops|), logical operators (see
|lua_logical_ops|), and the concatenation operator (see
|lua_concatenation|). Unary operators comprise the unary minus (see
|lua_arithmetic_ops|), the unary `not` (see |lua_logical_ops|), and the
unary `length operator` (see |lua_len|).

Both function calls and vararg expressions can result in multiple
values. If an expression is used as a statement (only possible for
function calls (see |lua_func_statement|)), then its return list is
adjusted to zero elements, thus discarding all returned values. If an
expression is used as the last (or the only) element of a list of
expressions, then no adjustment is made (unless the call is enclosed in
parentheses). In all other contexts, Lua adjusts the result list to one
element, discarding all values except the first one.

Here are some examples:
>
         f()                -- adjusted to 0 results
         g(f(), x)          -- f() is adjusted to 1 result
         g(x, f())          -- g gets x plus all results from f()
         a,b,c = f(), x     -- f() is adjusted to 1 result (c gets nil)
         a,b = ...          -- a gets the first vararg parameter, b gets
                            -- the second (both a and b can get nil if there
                            -- is no corresponding vararg parameter)

         a,b,c = x, f()     -- f() is adjusted to 2 results
         a,b,c = f()        -- f() is adjusted to 3 results
         return f()         -- returns all results from f()
         return ...         -- returns all received vararg parameters
         return x,y,f()     -- returns x, y, and all results from f()
         {f()}              -- creates a list with all results from f()
         {...}              -- creates a list with all vararg parameters
         {f(), nil}         -- f() is adjusted to 1 result
<
Any expression enclosed in parentheses always results in only one value.
Thus, `(f(x,y,z))` is always a single value, even if `f` returns several
values. (The value of `(f(x,y,z))` is the first value returned by `f` or
`nil` if `f` does not return any values.)

==============================================================================
ARITHMETIC OPERATORS                                      *lua_arithmetic_ops*

Lua supports the usual arithmetic operators: the binary `+` (addition),
`-` (subtraction), `*` (multiplication), `/` (division), `%` (modulo),
and `^` (exponentiation); and unary `-` (negation). If the operands are
numbers, or strings that can be converted to numbers (see
|lua_type_coercion|), then all operations have the usual meaning.
Exponentiation works for any exponent. For instance, `x^(-0.5)` computes
the inverse of the square root of `x`. Modulo is defined as
>
         a % b == a - math.floor(a/b)*b
<
That is, it is the remainder of a division that rounds the quotient
towards minus infinity.

==============================================================================
RELATIONAL OPERATORS                                      *lua_relational_ops*

The relational operators in Lua are
>
         ==    ~=    <     >     <=    >=
<
These operators always result in `false` or `true`.

Equality (====) first compares the type of its operands. If the types
are different, then the result is `false`. Otherwise, the values of the
operands are compared. Numbers and strings are compared in the usual
way. Objects (tables, userdata, threads, and functions) are compared by
`reference`: two objects are considered equal only if they are the
`same` object. Every time you create a new object (a table, userdata,
thread, or function), this new object is different from any previously
existing object.

You can change the way that Lua compares tables and userdata by using
the "eq" metamethod (see |lua_metatables|).

The conversion rules of |lua_type_coercion| `do not` apply to equality
comparisons. Thus, `"0"`=0= evaluates to `false`, and `t[0]` and
`t["0"]` denote different entries in a table.

The operator `~`= is exactly the negation of equality (====).

The order operators work as follows. If both arguments are numbers, then
they are compared as such. Otherwise, if both arguments are strings,
then their values are compared according to the current locale.
Otherwise, Lua tries to call the "lt" or the "le" metamethod (see
|lua_metatables|). A comparison `a > b` is translated to `b < a` and
`a >` b= is translated to `b <` a=.

==============================================================================
LOGICAL OPERATORS                                            *lua_logical_ops*

The logical operators in Lua are `and`, `or`, and `not`. Like the
control structures (see |lua_control|), all logical operators
consider both `false` and `nil` as false and anything else as true.

The negation operator `not` always returns `false` or `true`. The
conjunction operator `and` returns its first argument if this value is
`false` or `nil`; otherwise, `and` returns its second argument. The
disjunction operator `or` returns its first argument if this value is
different from `nil` and `false`; otherwise, `or` returns its second
argument. Both `and` and `or` use short-cut evaluation; that is, the
second operand is evaluated only if necessary. Here are some examples:
>
         10 or 20            --> 10
         10 or error()       --> 10
         nil or "a"          --> "a"
         nil and 10          --> nil
         false and error()   --> false
         false and nil       --> false
         false or nil        --> nil
         10 and 20           --> 20
<
(In this manual, `-->` indicates the result of the preceding
expression.)

==============================================================================
CONCATENATION                                              *lua_concatenation*

The string concatenation operator in Lua is denoted by two dots
('`..`'). If both operands are strings or numbers, then they are
converted to strings according to the rules mentioned in
|lua_type_coercion|. Otherwise, the "concat" metamethod is called (see
|lua_metatables|).

==============================================================================
THE LENGTH OPERATOR                                                  *lua_len*

The length operator is denoted by the unary operator `#`. The length of
a string is its number of bytes (that is, the usual meaning of string
length when each character is one byte).

The length of a table `t` is defined to be any integer index `n` such
that `t[n]` is not `nil` and `t[n+1]` is `nil`; moreover, if `t[1]` is
`nil`, `n` can be zero. For a regular array, with non-nil values from 1
to a given `n`, its length is exactly that `n`, the index of its last
value. If the array has "holes" (that is, `nil` values between other
non-nil values), then `#t` can be any of the indices that directly
precedes a `nil` value (that is, it may consider any such `nil` value as
the end of the array).

==============================================================================
PRECEDENCE                                                    *lua_precedence*

Operator precedence in Lua follows the table below, from lower to higher
priority:
>
         or
         and
         <     >     <=    >=    ~=    ==
         ..
         +     -
         *     /     %
         not   #     - (unary)
         ^
<
As usual, you can use parentheses to change the precedences of an
expression. The concatenation ('`..`') and exponentiation ('`^`')
operators are right associative. All other binary operators are left
associative.

==============================================================================
TABLE CONSTRUCTORS                                    *lua_table_constructors*

Table constructors are expressions that create tables. Every time a
constructor is evaluated, a new table is created. A constructor can be
used to create an empty table or to create a table and initialize some
of its fields. The general syntax for constructors is
>
        tableconstructor ::= `{´ [fieldlist] `}´
        fieldlist ::= field {fieldsep field} [fieldsep]
        field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp
        fieldsep ::= `,´ | `;´
<
Each field of the form =[exp1] = exp2= adds to the new table an entry
with key `exp1` and value `exp2`. A field of the form =name = exp= is
equivalent to =["name"] = exp=. Finally, fields of the form `exp` are
equivalent to =[i] = exp=, where `i` are consecutive numerical integers,
starting with 1. Fields in the other formats do not affect this
counting. For example,
>
         a = { [f(1)] = g; "x", "y"; x = 1, f(x), [30] = 23; 45 }
<
is equivalent to
>
         do
           local t = {}
           t[f(1)] = g
           t[1] = "x"         -- 1st exp
           t[2] = "y"         -- 2nd exp
           t.x = 1            -- t["x"] = 1
           t[3] = f(x)        -- 3rd exp
           t[30] = 23
           t[4] = 45          -- 4th exp
           a = t
         end
<
If the last field in the list has the form `exp` and the expression is a
function call or a vararg expression, then all values returned by this
expression enter the list consecutively (see |lua_function_calls|). To
avoid this, enclose the function call or the vararg expression in
parentheses (see |lua_expressions|).

The field list can have an optional trailing separator, as a convenience
for machine-generated code.

==============================================================================
FUNCTION CALLS                                            *lua_function_calls*

A function call in Lua has the following syntax:
>
        functioncall ::= prefixexp args
<
In a function call, first prefixexp and args are evaluated. If the value
of prefixexp has type `function`, then this function is called with the
given arguments. Otherwise, the prefixexp "call" metamethod is called,
having as first parameter the value of prefixexp, followed by the
original call arguments (see |lua_metatables|).

The form
>
        functioncall ::= prefixexp `:´ Name args
<
can be used to call "methods". A call `v:name(args)` is syntactic sugar
for `v.name(v,args)`, except that `v` is evaluated only once.

Arguments have the following syntax:
>
        args ::= `(´ [explist] `)´
        args ::= tableconstructor
        args ::= String
<
All argument expressions are evaluated before the call. A call of the
form `f{fields}` is syntactic sugar for `f({fields})`; that is, the
argument list is a single new table. A call of the form `f'string'` (or
`f"string"` or `f[[string]]`) is syntactic sugar for `f('string')`; that
is, the argument list is a single literal string.

As an exception to the free-format syntax of Lua, you cannot put a line
break before the '`(`' in a function call. This restriction avoids some
ambiguities in the language. If you write
>
         a = f
         (g).x(a)
<
Lua would see that as a single statement, =a = f(g).x(a)=. So, if you
want two statements, you must add a semi-colon between them. If you
actually want to call `f`, you must remove the line break before `(g)`.

A call of the form `return` `functioncall` is called a `tail call`. Lua
implements `proper tail calls` (or `proper tail recursion`): in a tail
call, the called function reuses the stack entry of the calling
function. Therefore, there is no limit on the number of nested tail
calls that a program can execute. However, a tail call erases any debug
information about the calling function. Note that a tail call only
happens with a particular syntax, where the `return` has one single
function call as argument; this syntax makes the calling function return
exactly the returns of the called function. So, none of the following
examples are tail calls:
>
         return (f(x))        -- results adjusted to 1
         return 2 * f(x)
         return x, f(x)       -- additional results
         f(x); return         -- results discarded
         return x or f(x)     -- results adjusted to 1
<
==============================================================================
FUNCTION DEFINITIONS                                       *lua_function_defs*

The syntax for function definition is
>
        function ::= function funcbody
        funcbody ::= `(´ [parlist] `)´ block end
<
The following syntactic sugar simplifies function definitions:
>
        stat ::= function funcname funcbody
        stat ::= local function Name funcbody
        funcname ::= Name {`.´ Name} [`:´ Name]
<
The statement
>
         function f () body end
<
translates to
>
         f = function () body end
<
The statement
>
         function t.a.b.c.f () body end
<
translates to
>
         t.a.b.c.f = function () body end
<
The statement
>
         local function f () body end
<
translates to
>
         local f; f = function () body end
<
`not` to
>
         local f = function () body end
<
(This only makes a difference when the body of the function contains
references to `f`.)

A function definition is an executable expression, whose value has type
`function`. When Lua pre-compiles a chunk, all its function bodies are
pre-compiled too. Then, whenever Lua executes the function definition,
the function is `instantiated` (or `closed`). This function instance (or
`closure`) is the final value of the expression. Different instances of
the same function can refer to different external local variables and
can have different environment tables.

Parameters act as local variables that are initialized with the argument
values:
>
        parlist ::= namelist [`,´ `...´] | `...´
<
When a function is called, the list of arguments is adjusted to the
length of the list of parameters, unless the function is a variadic or
`vararg function`, which is indicated by three dots ('`...`') at the end
of its parameter list. A vararg function does not adjust its argument
list; instead, it collects all extra arguments and supplies them to the
function through a `vararg expression`, which is also written as three
dots. The value of this expression is a list of all actual extra
arguments, similar to a function with multiple results. If a vararg
expression is used inside another expression or in the middle of a list
of expressions, then its return list is adjusted to one element. If the
expression is used as the last element of a list of expressions, then no
adjustment is made (unless that last expression is enclosed in
parentheses).

As an example, consider the following definitions:
>
         function f(a, b) end
         function g(a, b, ...) end
         function r() return 1,2,3 end
<
Then, we have the following mapping from arguments to parameters and to
the vararg expression:
>
         CALL            PARAMETERS

         f(3)             a=3, b=nil
         f(3, 4)          a=3, b=4
         f(3, 4, 5)       a=3, b=4
         f(r(), 10)       a=1, b=10
         f(r())           a=1, b=2

         g(3)             a=3, b=nil, ... -->  (nothing)
         g(3, 4)          a=3, b=4,   ... -->  (nothing)
         g(3, 4, 5, 8)    a=3, b=4,   ... -->  5  8
         g(5, r())        a=5, b=1,   ... -->  2  3
<
Results are returned using the `return` statement (see
|lua_control|). If control reaches the end of a function without
encountering a `return` statement, then the function returns with no
results.

The `colon` syntax is used for defining `methods`, that is, functions
that have an implicit extra parameter `self`. Thus, the statement
>
         function t.a.b.c:f (params) body end
<
is syntactic sugar for
>
         t.a.b.c.f = function (self, params) body end
<
==============================================================================
VISIBILITY RULES                                                   *lua_scope*

Lua is a lexically scoped language. The scope of variables begins at the
first statement `after` their declaration and lasts until the end of the
innermost block that includes the declaration. Consider the following
example:
>
         x = 10                -- global variable
         do                    -- new block
           local x = x         -- new 'x', with value 10
           print(x)            --> 10
           x = x+1
           do                  -- another block
             local x = x+1     -- another 'x'
             print(x)          --> 12
           end
           print(x)            --> 11
         end
         print(x)              --> 10  (the global one)
<
Notice that, in a declaration like =local x = x=, the new `x` being
declared is not in scope yet, and so the second `x` refers to the
outside variable.

Because of the lexical scoping rules, local variables can be freely
accessed by functions defined inside their scope. A local variable used
by an inner function is called an `upvalue`, or /external local
variable/, inside the inner function.

Notice that each execution of a `local` statement defines new local
variables. Consider the following example:
>
         a = {}
         local x = 20
         for i=1,10 do
           local y = 0
           a[i] = function () y=y+1; return x+y end
         end
<
The loop creates ten closures (that is, ten instances of the anonymous
function). Each of these closures uses a different `y` variable, while
all of them share the same `x`.

==============================================================================
ERROR HANDLING                                                    *lua_errors*

Because Lua is an embedded extension language, all Lua actions start
from C code in the host program calling a function from the Lua library
(see |lua_pcall|). Whenever an error occurs during Lua
compilation or execution, control returns to C, which can take
appropriate measures (such as printing an error message).

Lua code can explicitly generate an error by calling the
|error| function. If you need to catch errors in Lua,
you can use the |pcall| function.

==============================================================================
METATABLES                                                    *lua_metatables*

Every value in Lua can have a `metatable`. This `metatable` is an
ordinary Lua table that defines the behavior of the original value under
certain special operations. You can change several aspects of the
behavior of operations over a value by setting specific fields in its
metatable. For instance, when a non-numeric value is the operand of an
addition, Lua checks for a function in the field `"__add"` in its
metatable. If it finds one, Lua calls this function to perform the
addition.

We call the keys in a metatable `events` and the values `metamethods`.
In the previous example, the event is `"add"` and the metamethod is the
function that performs the addition.

You can query the metatable of any value through the
|getmetatable| function.

You can replace the metatable of tables through the
|setmetatable| function. You cannot change the
metatable of other types from Lua (except by using the debug library);
you must use the C API for that.

Tables and full userdata have individual metatables (although multiple
tables and userdata can share their metatables). Values of all other
types share one single metatable per type; that is, there is one single
metatable for all numbers, one for all strings, etc.

A metatable controls how an object behaves in arithmetic operations,
order comparisons, concatenation, length operation, and indexing. A
metatable also can define a function to be called when a userdata is
garbage collected. For each of these operations Lua associates a
specific key called an `event`. When Lua performs one of these
operations over a value, it checks whether this value has a metatable
with the corresponding event. If so, the value associated with that key
(the metamethod) controls how Lua will perform the operation.

Metatables control the operations listed next. Each operation is
identified by its corresponding name. The key for each operation is a
string with its name prefixed by two underscores, '`__`'; for instance,
the key for operation "add" is the string `"__add"`. The semantics of
these operations is better explained by a Lua function describing how
the interpreter executes the operation.

The code shown here in Lua is only illustrative; the real behavior is
hard coded in the interpreter and it is much more efficient than this
simulation. All functions used in these descriptions
(|rawget|, |tonumber|, etc.) are
described in |lua_builtins|. In particular, to retrieve the metamethod
of a given object, we use the expression
>
         metatable(obj)[event]
<
This should be read as
>
         rawget(getmetatable(obj) or {}, event)
<
That is, the access to a metamethod does not invoke other metamethods,
and the access to objects with no metatables does not fail (it simply
results in `nil`).

                                      *lua_metamethods* *lua_metatable_events*
- `add`: the `+` operation.

  The function `getbinhandler` below defines how Lua chooses a handler
  for a binary operation. First, Lua tries the first operand. If its
  type does not define a handler for the operation, then Lua tries the
  second operand.
>
           function getbinhandler (op1, op2, event)
             return metatable(op1)[event] or metatable(op2)[event]
           end
<
  By using this function, the behavior of the `op1 + op2` is
>
           function add_event (op1, op2)
             local o1, o2 = tonumber(op1), tonumber(op2)
             if o1 and o2 then  -- both operands are numeric?
               return o1 + o2   -- '+' here is the primitive 'add'
             else  -- at least one of the operands is not numeric
               local h = getbinhandler(op1, op2, "__add")
               if h then
                 -- call the handler with both operands
                 return (h(op1, op2))
               else  -- no handler available: default behavior
                 error(···)
               end
             end
           end
<
- `sub`: the `-` operation. Behavior similar to the "add" operation.
- `mul`: the `*` operation. Behavior similar to the "add" operation.
- `div`: the `/` operation. Behavior similar to the "add" operation.
- `mod`: the `%` operation. Behavior similar to the "add" operation,
  with the operation `o1 - floor(o1/o2)*o2` as the primitive operation.
- `pow`: the `^` (exponentiation) operation. Behavior similar to the
  "add" operation, with the function `pow` (from the C math library) as
  the primitive operation.
- `unm`: the unary `-` operation.
>
           function unm_event (op)
             local o = tonumber(op)
             if o then  -- operand is numeric?
               return -o  -- '-' here is the primitive 'unm'
             else  -- the operand is not numeric.
               -- Try to get a handler from the operand
               local h = metatable(op).__unm
               if h then
                 -- call the handler with the operand
                 return (h(op))
               else  -- no handler available: default behavior
                 error(···)
               end
             end
           end
<
- `concat`: the `..` (concatenation) operation.
>
           function concat_event (op1, op2)
             if (type(op1) == "string" or type(op1) == "number") and
                (type(op2) == "string" or type(op2) == "number") then
               return op1 .. op2  -- primitive string concatenation
             else
               local h = getbinhandler(op1, op2, "__concat")
               if h then
                 return (h(op1, op2))
               else
                 error(···)
               end
             end
           end
<
- `len`: the `#` operation.
>
           function len_event (op)
             if type(op) == "string" then
               return strlen(op)         -- primitive string length
             elseif type(op) == "table" then
               return #op                -- primitive table length
             else
               local h = metatable(op).__len
               if h then
                 -- call the handler with the operand
                 return (h(op))
               else  -- no handler available: default behavior
                 error(···)
               end
             end
           end
<
  See |lua_len| for a description of the length of a table.

- `eq`: the ==== operation. The function `getcomphandler` defines how
  Lua chooses a metamethod for comparison operators. A metamethod only
  is selected when both objects being compared have the same type and
  the same metamethod for the selected operation.
>
           function getcomphandler (op1, op2, event)
             if type(op1) ~= type(op2) then return nil end
             local mm1 = metatable(op1)[event]
             local mm2 = metatable(op2)[event]
             if mm1 == mm2 then return mm1 else return nil end
           end
<
  The "eq" event is defined as follows:
>
           function eq_event (op1, op2)
             if type(op1) ~= type(op2) then  -- different types?
               return false   -- different objects
             end
             if op1 == op2 then   -- primitive equal?
               return true   -- objects are equal
             end
             -- try metamethod
             local h = getcomphandler(op1, op2, "__eq")
             if h then
               return (h(op1, op2))
             else
               return false
             end
           end
<
  `a ~` b= is equivalent to =not (a == b)=.

- `lt`: the `<` operation.
>
           function lt_event (op1, op2)
             if type(op1) == "number" and type(op2) == "number" then
               return op1 < op2   -- numeric comparison
             elseif type(op1) == "string" and type(op2) == "string" then
               return op1 < op2   -- lexicographic comparison
             else
               local h = getcomphandler(op1, op2, "__lt")
               if h then
                 return (h(op1, op2))
               else
                 error(···)
               end
             end
           end
<
  `a > b` is equivalent to `b < a`.

- `le`: the `<`= operation.
>
           function le_event (op1, op2)
             if type(op1) == "number" and type(op2) == "number" then
               return op1 <= op2   -- numeric comparison
             elseif type(op1) == "string" and type(op2) == "string" then
               return op1 <= op2   -- lexicographic comparison
             else
               local h = getcomphandler(op1, op2, "__le")
               if h then
                 return (h(op1, op2))
               else
                 h = getcomphandler(op1, op2, "__lt")
                 if h then
                   return not h(op2, op1)
                 else
                   error(···)
                 end
               end
             end
           end
<
  `a >` b= is equivalent to `b <` a=. Note that, in the absence of a
  "le" metamethod, Lua tries the "lt", assuming that `a <` b= is
  equivalent to `not (b < a)`.

- `index`: The indexing access `table[key]`.
>
           function gettable_event (table, key)
             local h
             if type(table) == "table" then
               local v = rawget(table, key)
               if v ~= nil then return v end
               h = metatable(table).__index
               if h == nil then return nil end
             else
               h = metatable(table).__index
               if h == nil then
                 error(···)
               end
             end
             if type(h) == "function" then
               return (h(table, key))     -- call the handler
             else return h[key]           -- or repeat operation on it
             end
           end
<
- `newindex`: The indexing assignment =table[key] = value=.
>
           function settable_event (table, key, value)
             local h
             if type(table) == "table" then
               local v = rawget(table, key)
               if v ~= nil then rawset(table, key, value); return end
               h = metatable(table).__newindex
               if h == nil then rawset(table, key, value); return end
             else
               h = metatable(table).__newindex
               if h == nil then
                 error(···)
               end
             end
             if type(h) == "function" then
               h(table, key,value)           -- call the handler
             else h[key] = value             -- or repeat operation on it
             end
           end
<
- `call`: called when Lua calls a value.
>
           function function_event (func, ...)
             if type(func) == "function" then
               return func(...)   -- primitive call
             else
               local h = metatable(func).__call
               if h then
                 return h(func, ...)
               else
                 error(···)
               end
             end
           end
<
==============================================================================
ENVIRONMENTS                                                *lua_environments*

Besides metatables, objects of types thread, function, and userdata have
another table associated with them, called their `environment`. Like
metatables, environments are regular tables and multiple objects can
share the same environment.

Threads are created sharing the environment of the creating thread.
Userdata and C functions are created sharing the environment of the
creating C function. Non-nested Lua functions (created by
|loadfile|, |loadstring| or
|load|) are created sharing the environment of the
creating thread. Nested Lua functions are created sharing the
environment of the creating Lua function.

Environments associated with userdata have no meaning for Lua. It is
only a convenience feature for programmers to associate a table to a
userdata.

Environments associated with threads are called `global environments`.
They are used as the default environment for threads and non-nested Lua
functions created by the thread and can be directly accessed by C code
(see https://www.lua.org/manual/5.1/manual.html#3.3).

The environment associated with a C function can be directly accessed by
C code (see https://www.lua.org/manual/5.1/manual.html#3.3). It is used as the default environment for
other C functions and userdata created by the function.

Environments associated with Lua functions are used to resolve all
accesses to global variables within the function (see |lua_variables|).
They are used as the default environment for nested Lua functions
created by the function.

You can change the environment of a Lua function or the running thread
by calling |setfenv|. You can get the environment of a
Lua function or the running thread by calling
|getfenv|. To manipulate the environment of other
objects (userdata, C functions, other threads) you must use the C API.

==============================================================================
GARBAGE COLLECTION                                                    *lua_gc*

Lua performs automatic memory management. This means that you have to
worry neither about allocating memory for new objects nor about freeing
it when the objects are no longer needed. Lua manages memory
automatically by running a `garbage collector` from time to time to
collect all `dead objects` (that is, objects that are no longer
accessible from Lua). All memory used by Lua is subject to automatic
management: tables, userdata, functions, threads, strings, etc.

Lua implements an incremental mark-and-sweep collector. It uses two
numbers to control its garbage-collection cycles: the /garbage-collector
pause/ and the `garbage-collector step multiplier`. Both use percentage
points as units (so that a value of 100 means an internal value of 1).

The garbage-collector pause controls how long the collector waits before
starting a new cycle. Larger values make the collector less aggressive.
Values smaller than 100 mean the collector will not wait to start a new
cycle. A value of 200 means that the collector waits for the total
memory in use to double before starting a new cycle.

The step multiplier controls the relative speed of the collector
relative to memory allocation. Larger values make the collector more
aggressive but also increase the size of each incremental step. Values
smaller than 100 make the collector too slow and can result in the
collector never finishing a cycle. The default, 200, means that the
collector runs at "twice" the speed of memory allocation.

You can change these numbers by calling |lua_gc| in C or
|collectgarbage| in Lua. With these functions
you can also control the collector directly (e.g., stop and restart it).

==============================================================================
WEAK TABLES                                                         *lua_weak*

A `weak table` is a table whose elements are `weak references`. A weak
reference is ignored by the garbage collector. In other words, if the
only references to an object are weak references, then the garbage
collector will collect this object.

A weak table can have weak keys, weak values, or both. A table with weak
keys allows the collection of its keys, but prevents the collection of
its values. A table with both weak keys and weak values allows the
collection of both keys and values. In any case, if either the key or
the value is collected, the whole pair is removed from the table. The
weakness of a table is controlled by the `__mode` field of its
metatable. If the `__mode` field is a string containing the
character '`k`', the keys in the table are weak. If `__mode` contains
'`v`', the values in the table are weak.

After you use a table as a metatable, you should not change the value of
its `__mode` field. Otherwise, the weak behavior of the tables
controlled by this metatable is undefined.

==============================================================================
COROUTINES                                                    *lua_coroutines*

Lua supports coroutines, also called `collaborative multithreading`. A
coroutine in Lua represents an independent thread of execution. Unlike
threads in multithread systems, however, a coroutine only suspends its
execution by explicitly calling a yield function.

You create a coroutine with a call to
|coroutine.create|. Its sole argument is a
function that is the main function of the coroutine. The `create`
function only creates a new coroutine and returns a handle to it (an
object of type `thread`); it does not start the coroutine execution.

When you first call |coroutine.resume|,
passing as its first argument a thread returned by
|coroutine.create|, the coroutine starts its
execution, at the first line of its main function. Extra arguments
passed to |coroutine.resume| are passed on to
the coroutine main function. After the coroutine starts running, it runs
until it terminates or `yields`.

A coroutine can terminate its execution in two ways: normally, when its
main function returns (explicitly or implicitly, after the last
instruction); and abnormally, if there is an unprotected error. In the
first case, |coroutine.resume| returns
`true`, plus any values returned by the coroutine main function. In case
of errors, |coroutine.resume| returns `false`
plus an error message.

A coroutine yields by calling
|coroutine.yield|. When a coroutine yields,
the corresponding |coroutine.resume| returns
immediately, even if the yield happens inside nested function calls
(that is, not in the main function, but in a function directly or
indirectly called by the main function). In the case of a yield,
|coroutine.resume| also returns `true`, plus
any values passed to |coroutine.yield|. The
next time you resume the same coroutine, it continues its execution from
the point where it yielded, with the call to
|coroutine.yield| returning any extra
arguments passed to |coroutine.resume|.

Like |coroutine.create|, the
|coroutine.wrap| function also creates a
coroutine, but instead of returning the coroutine itself, it returns a
function that, when called, resumes the coroutine. Any arguments passed
to this function go as extra arguments to
|coroutine.resume|.
|coroutine.wrap| returns all the values
returned by |coroutine.resume|, except the
first one (the boolean error code). Unlike
|coroutine.resume|,
|coroutine.wrap| does not catch errors; any
error is propagated to the caller.

As an example, consider the following code:
>
         function foo (a)
           print("foo", a)
           return coroutine.yield(2*a)
         end

         co = coroutine.create(function (a,b)
               print("co-body", a, b)
               local r = foo(a+1)
               print("co-body", r)
               local r, s = coroutine.yield(a+b, a-b)
               print("co-body", r, s)
               return b, "end"
         end)

         print("main", coroutine.resume(co, 1, 10))
         print("main", coroutine.resume(co, "r"))
         print("main", coroutine.resume(co, "x", "y"))
         print("main", coroutine.resume(co, "x", "y"))
<
When you run it, it produces the following output:
>
         co-body 1       10
         foo     2

         main    true    4
         co-body r
         main    true    11      -9
         co-body x       y
         main    true    10      end
         main    false   cannot resume dead coroutine
<
==============================================================================
STANDARD LIBRARIES                                                *lua_stdlib*

The standard Lua libraries provide useful functions that are implemented
directly through the C API. Some of these functions provide essential
services to the language (e.g., |type| and
|getmetatable|); others provide access to
"outside" services (e.g., I/O); and others could be implemented in Lua
itself, but are quite useful or have critical performance requirements
that deserve an implementation in C (e.g.,
|table.sort|).

All libraries are implemented through the official C API and are
provided as separate C modules. Currently, Lua has the following
standard libraries:

- basic library, which includes the coroutine sub-library;
- package library;
- string manipulation;
- table manipulation;
- mathematical functions (sin, log, etc.);
- input and output;
- operating system facilities;
- debug facilities.

Except for the basic and package libraries, each library provides all
its functions as fields of a global table or as methods of its objects.

To have access to these libraries, the C host program should call the
|luaL_openlibs| function, which opens all standard
libraries. Alternatively, it can open them individually by calling
`luaopen_base` (for the basic library), `luaopen_package` (for the
package library), `luaopen_string` (for the string library),
`luaopen_table` (for the table library), `luaopen_math` (for the
mathematical library), `luaopen_io` (for the I/O library), `luaopen_os`
(for the Operating System library), and `luaopen_debug` (for the debug
library). These functions are declared in `lualib.h` and should not be
called directly: you must call them like any other Lua C function, e.g.,
by using |lua_call|.

==============================================================================
BASIC FUNCTIONS                                                 *lua_builtins*

The basic library provides some core functions to Lua. If you do not
include this library in your application, you should check carefully
whether you need to provide implementations for some of its facilities.

assert (v [, message])                                                *assert*
    Issues an error when the value of its argument `v` is false (i.e., `nil`
    or `false`); otherwise, returns all its arguments. `message` is an error
    message; when absent, it defaults to "assertion failed!"

collectgarbage ([opt [, arg]])                                *collectgarbage*
    This function is a generic interface to the garbage collector. It
    performs different functions according to its first argument, `opt`:

    - `collect`: performs a full garbage-collection cycle. This is the
      default option.
    - `stop`: stops the garbage collector.
    - `restart`: restarts the garbage collector.
    - `count`: returns the total memory in use by Lua (in Kbytes).
    - `step`: performs a garbage-collection step. The step "size" is
      controlled by `arg` (larger values mean more steps) in a non-specified
      way. If you want to control the step size you must experimentally tune
      the value of `arg`. Returns `true` if the step finished a collection
      cycle.
    - `setpause`: sets `arg` as the new value for the `pause` of the
      collector (see |lua_gc|). Returns the previous value for
      `pause`.
    - `setstepmul`: sets `arg` as the new value for the `step multiplier`
      of the collector (see |lua_gc|). Returns the previous value
      for `step`.

dofile ([filename])                                                   *dofile*
    Opens the named file and executes its contents as a Lua chunk. When
    called without arguments, `dofile` executes the contents of the standard
    input (`stdin`). Returns all values returned by the chunk. In case of
    errors, `dofile` propagates the error to its caller (that is, `dofile`
    does not run in protected mode).

error (message [, level])                                              *error*
    Terminates the last protected function called and returns `message` as
    the error message. Function `error` never returns.

    Usually, `error` adds some information about the error position at the
    beginning of the message. The `level` argument specifies how to get the
    error position. With level 1 (the default), the error position is where
    the `error` function was called. Level 2 points the error to where the
    function that called `error` was called; and so on. Passing a level 0
    avoids the addition of error position information to the message.

_G                                                                        *_G*
    A global variable (not a function) that holds the global environment
    (that is, =_G._G = _G=). Lua itself does not use this variable; changing
    its value does not affect any environment, nor vice-versa. (Use
    |setfenv| to change environments.)

getfenv ([f])                                                        *getfenv*
    Returns the current environment in use by the function. `f` can be a Lua
    function or a number that specifies the function at that stack level:
    Level 1 is the function calling `getfenv`. If the given function is not
    a Lua function, or if `f` is 0, `getfenv` returns the global
    environment. The default for `f` is 1.

getmetatable (object)                                           *getmetatable*
    If `object` does not have a metatable, returns `nil`. Otherwise, if the
    object's metatable has a `"__metatable"` field, returns the associated
    value. Otherwise, returns the metatable of the given object.

ipairs (t)                                                            *ipairs*
    Returns three values: an iterator function, the table `t`, and 0, so
    that the construction
    >
	     for i,v in ipairs(t) do body end
    <
    will iterate over the pairs (`1,t[1]`), (`2,t[2]`), ···, up to the first
    integer key absent from the table.

load (func [, chunkname])                                               *load*
    Loads a chunk using function `func` to get its pieces. Each call to
    `func` must return a string that concatenates with previous results. A
    return of an empty string, `nil`, or no value signals the end of the
    chunk.

    If there are no errors, returns the compiled chunk as a function;
    otherwise, returns `nil` plus the error message. The environment of the
    returned function is the global environment.

    `chunkname` is used as the chunk name for error messages and debug
    information. When absent, it defaults to "==(load)=".

loadfile ([filename])                                               *loadfile*
    Similar to |load|, but gets the chunk from file
    `filename` or from the standard input, if no file name is given.

loadstring (string [, chunkname])                                 *loadstring*
    Similar to |load|, but gets the chunk from the given
    string.

    To load and run a given string, use the idiom
    >
	     assert(loadstring(s))()
    <
    When absent, `chunkname` defaults to the given string.

next (table [, index])                                                  *next*
    Allows a program to traverse all fields of a table. Its first argument
    is a table and its second argument is an index in this table. `next`
    returns the next index of the table and its associated value. When
    called with `nil` as its second argument, `next` returns an initial
    index and its associated value. When called with the last index, or with
    `nil` in an empty table, `next` returns `nil`. If the second argument is
    absent, then it is interpreted as `nil`. In particular, you can use
    `next(t)` to check whether a table is empty.

    The order in which the indices are enumerated is not specified, /even
    for numeric indices/. (To traverse a table in numeric order, use a
    numerical `for` or the |ipairs| function.)

    The behavior of `next` is `undefined` if, during the traversal, you
    assign any value to a non-existent field in the table. You may however
    modify existing fields. In particular, you may clear existing fields.

pairs (t)                                                              *pairs*
    Returns three values: the |next| function, the table `t`,
    and `nil`, so that the construction
    >
	     for k,v in pairs(t) do body end
    <
    will iterate over all key--value pairs of table `t`.

    See function |next| for the caveats of modifying the
    table during its traversal.

pcall (f, arg1, ···)                                                   *pcall*
    Calls function `f` with the given arguments in `protected mode`. This
    means that any error inside `f` is not propagated; instead, `pcall`
    catches the error and returns a status code. Its first result is the
    status code (a boolean), which is true if the call succeeds without
    errors. In such case, `pcall` also returns all results from the call,
    after this first result. In case of any error, `pcall` returns `false`
    plus the error message.

print (···)                                                            *print*
    Receives any number of arguments, and prints their values to `stdout`,
    using the |tostring| function to convert them to
    strings. `print` is not intended for formatted output, but only as a
    quick way to show a value, typically for debugging. For formatted
    output, use |string.format|.

rawequal (v1, v2)                                                   *rawequal*
    Checks whether `v1` is equal to `v2`, without invoking any metamethod.
    Returns a boolean.

rawget (table, index)                                                 *rawget*
    Gets the real value of `table[index]`, without invoking any metamethod.
    `table` must be a table; `index` may be any value.

rawset (table, index, value)                                          *rawset*
    Sets the real value of `table[index]` to `value`, without invoking any
    metamethod. `table` must be a table, `index` any value different from
    `nil`, and `value` any Lua value.

    This function returns `table`.

select (index, ···)                                                   *select*
    If `index` is a number, returns all arguments after argument number
    `index`. Otherwise, `index` must be the string `"#"`, and `select`
    returns the total number of extra arguments it received.

setfenv (f, table)                                                   *setfenv*
    Sets the environment to be used by the given function. `f` can be a Lua
    function or a number that specifies the function at that stack level:
    Level 1 is the function calling `setfenv`. `setfenv` returns the given
    function.

    As a special case, when `f` is 0 `setfenv` changes the environment of
    the running thread. In this case, `setfenv` returns no values.

setmetatable (table, metatable)                                 *setmetatable*
    Sets the metatable for the given table. (You cannot change the metatable
    of other types from Lua, only from C.) If `metatable` is `nil`, removes
    the metatable of the given table. If the original metatable has a
    `"__metatable"` field, raises an error.

    This function returns `table`.

tonumber (e [, base])                                               *tonumber*
    Tries to convert its argument to a number. If the argument is already a
    number or a string convertible to a number, then `tonumber` returns this
    number; otherwise, it returns `nil`.

    An optional argument specifies the base to interpret the numeral. The
    base may be any integer between 2 and 36, inclusive. In bases above 10,
    the letter '`A`' (in either upper or lower case) represents 10, '`B`'
    represents 11, and so forth, with '`Z`' representing 35. In base 10 (the
    default), the number can have a decimal part, as well as an optional
    exponent part (see |lua_conventions|). In other bases, only unsigned
    integers are accepted.

tostring (e)                                                        *tostring*
    Receives an argument of any type and converts it to a string in a
    reasonable format. For complete control of how numbers are converted,
    use |string.format|.

    If the metatable of `e` has a `"__tostring"` field, then `tostring`
    calls the corresponding value with `e` as argument, and uses the result
    of the call as its result.

type (v)                                                                *type*
    Returns the type of its only argument, coded as a string. The possible
    results of this function are "`nil`" (a string, not the value `nil`),
    "`number`", "`string`", "`boolean`", "`table`", "`function`",
    "`thread`", and "`userdata`".

unpack (list [, i [, j]])                                             *unpack*
    Returns the elements from the given table. This function is equivalent
    to
    >
	     return list[i], list[i+1], ···, list[j]
    <
    except that the above code can be written only for a fixed number of
    elements. By default, `i` is 1 and `j` is the length of the list, as
    defined by the length operator (see |lua_len|).

_VERSION                                                            *_VERSION*
    A global variable (not a function) that holds a string containing the
    current interpreter version. The current contents of this variable is
    "`Lua 5.1`".

xpcall (f, err)                                                       *xpcall*
    This function is similar to |pcall|, except that you can
    set a new error handler.

    `xpcall` calls function `f` in protected mode, using `err` as the error
    handler. Any error inside `f` is not propagated; instead, `xpcall`
    catches the error, calls the `err` function with the original error
    object, and returns a status code. Its first result is the status code
    (a boolean), which is true if the call succeeds without errors. In this
    case, `xpcall` also returns all results from the call, after this first
    result. In case of any error, `xpcall` returns `false` plus the result
    from `err`.

==============================================================================
COROUTINE MANIPULATION                                 *lua_module_coroutines*

The operations related to coroutines comprise a sub-library of the basic
library and come inside the table `coroutine`. See |lua_coroutines| for
a general description of coroutines.

coroutine.create (f)                                        *coroutine.create*
    Creates a new coroutine, with body `f`. `f` must be a Lua function.
    Returns this new coroutine, an object with type `"thread"`.

coroutine.resume (co [, val1, ···])                         *coroutine.resume*
    Starts or continues the execution of coroutine `co`. The first time you
    resume a coroutine, it starts running its body. The values `val1`, ···
    are passed as the arguments to the body function. If the coroutine has
    yielded, `resume` restarts it; the values `val1`, ··· are passed as the
    results from the yield.

    If the coroutine runs without any errors, `resume` returns `true` plus
    any values passed to `yield` (if the coroutine yields) or any values
    returned by the body function (if the coroutine terminates). If there is
    any error, `resume` returns `false` plus the error message.

coroutine.running ()                                       *coroutine.running*
    Returns the running coroutine, or `nil` when called by the main thread.

coroutine.status (co)                                       *coroutine.status*
    Returns the status of coroutine `co`, as a string: `"running"`, if the
    coroutine is running (that is, it called `status`); `"suspended"`, if
    the coroutine is suspended in a call to `yield`, or if it has not
    started running yet; `"normal"` if the coroutine is active but not
    running (that is, it has resumed another coroutine); and `"dead"` if the
    coroutine has finished its body function, or if it has stopped with an
    error.

coroutine.wrap (f)                                            *coroutine.wrap*
    Creates a new coroutine, with body `f`. `f` must be a Lua function.
    Returns a function that resumes the coroutine each time it is called.
    Any arguments passed to the function behave as the extra arguments to
    `resume`. Returns the same values returned by `resume`, except the first
    boolean. In case of error, propagates the error.

coroutine.yield (···)                                        *coroutine.yield*
    Suspends the execution of the calling coroutine. The coroutine cannot be
    running a C function, a metamethod, or an iterator. Any arguments to
    `yield` are passed as extra results to `resume`.

==============================================================================
MODULES                                                          *lua_modules*

The package library provides basic facilities for loading and building
modules in Lua. It exports two of its functions directly in the global
environment: |require| and |module|.
Everything else is exported in a table `package`.

module (name [, ···])                                                 *module*
    Creates a module. If there is a table in `package.loaded[name]`, this
    table is the module. Otherwise, if there is a global table `t` with the
    given name, this table is the module. Otherwise creates a new table `t`
    and sets it as the value of the global `name` and the value of
    `package.loaded[name]`. This function also initializes `t._NAME` with
    the given name, `t._M` with the module (`t` itself), and `t._PACKAGE`
    with the package name (the full module name minus last component; see
    below). Finally, `module` sets `t` as the new environment of the current
    function and the new value of `package.loaded[name]`, so that
    |require| returns `t`.

    If `name` is a compound name (that is, one with components separated by
    dots), `module` creates (or reuses, if they already exist) tables for
    each component. For instance, if `name` is `a.b.c`, then `module` stores
    the module table in field `c` of field `b` of global `a`.

    This function can receive optional `options` after the module name,
    where each option is a function to be applied over the module.

require (modname)                                                    *require*
    Loads the given module. The function starts by looking into the
    |package.loaded| table to determine whether
    `modname` is already loaded. If it is, then `require` returns the value
    stored at `package.loaded[modname]`. Otherwise, it tries to find a
    `loader` for the module.

    To find a loader, `require` is guided by the
    |package.loaders| array. By changing this
    array, we can change how `require` looks for a module. The following
    explanation is based on the default configuration for
    |package.loaders|.

    First `require` queries `package.preload[modname]`. If it has a value,
    this value (which should be a function) is the loader. Otherwise
    `require` searches for a Lua loader using the path stored in
    |package.path|. If that also fails, it searches
    for a C loader using the path stored in
    |package.cpath|. If that also fails, it tries an
    `all-in-one` loader (see |package.loaders|).

    Once a loader is found, `require` calls the loader with a single
    argument, `modname`. If the loader returns any value, `require` assigns
    the returned value to `package.loaded[modname]`. If the loader returns
    no value and has not assigned any value to `package.loaded[modname]`,
    then `require` assigns `true` to this entry. In any case, `require`
    returns the final value of `package.loaded[modname]`.

    If there is any error loading or running the module, or if it cannot
    find any loader for the module, then `require` signals an error.

package.cpath                                                  *package.cpath*
    The path used by |require| to search for a C loader.

    Lua initializes the C path |package.cpath| in
    the same way it initializes the Lua path
    |package.path|, using the environment variable
    `LUA_CPATH` or a default path defined in `luaconf.h`.

package.loaded                                                *package.loaded*
    A table used by |require| to control which modules are
    already loaded. When you require a module `modname` and
    `package.loaded[modname]` is not false, |require|
    simply returns the value stored there.

package.loaders                                              *package.loaders*
    A table used by |require| to control how to load
    modules.

    Each entry in this table is a `searcher function`. When looking for a
    module, |require| calls each of these searchers in
    ascending order, with the module name (the argument given to
    |require|) as its sole parameter. The function can
    return another function (the module `loader`) or a string explaining why
    it did not find that module (or `nil` if it has nothing to say). Lua
    initializes this table with four functions.

    The first searcher simply looks for a loader in the
    |package.preload| table.

    The second searcher looks for a loader as a Lua library, using the path
    stored at |package.path|. A path is a sequence of
    `templates` separated by semicolons. For each template, the searcher
    will change each interrogation mark in the template by `filename`, which
    is the module name with each dot replaced by a "directory separator"
    (such as "`/`" in Unix); then it will try to open the resulting file
    name. So, for instance, if the Lua path is the string
    >
	     "./?.lua;./?.lc;/usr/local/?/init.lua"
    <
    the search for a Lua file for module `foo` will try to open the files
    `./foo.lua`, `./foo.lc`, and `/usr/local/foo/init.lua`, in that order.

    The third searcher looks for a loader as a C library, using the path
    given by the variable |package.cpath|. For
    instance, if the C path is the string
    >
	     "./?.so;./?.dll;/usr/local/?/init.so"
    <
    the searcher for module `foo` will try to open the files `./foo.so`,
    `./foo.dll`, and `/usr/local/foo/init.so`, in that order. Once it finds
    a C library, this searcher first uses a dynamic link facility to link
    the application with the library. Then it tries to find a C function
    inside the library to be used as the loader. The name of this C function
    is the string "`luaopen_`" concatenated with a copy of the module name
    where each dot is replaced by an underscore. Moreover, if the module
    name has a hyphen, its prefix up to (and including) the first hyphen is
    removed. For instance, if the module name is `a.v1-b.c`, the function
    name will be `luaopen_b_c`.

    The fourth searcher tries an `all-in-one loader`. It searches the C path
    for a library for the root name of the given module. For instance, when
    requiring `a.b.c`, it will search for a C library for `a`. If found, it
    looks into it for an open function for the submodule; in our example,
    that would be `luaopen_a_b_c`. With this facility, a package can pack
    several C submodules into one single library, with each submodule
    keeping its original open function.

package.loadlib (libname, funcname)                          *package.loadlib*
    Dynamically links the host program with the C library `libname`. Inside
    this library, looks for a function `funcname` and returns this function
    as a C function. (So, `funcname` must follow the protocol (see
    |lua_CFunction|)).

    This is a low-level function. It completely bypasses the package and
    module system. Unlike |require|, it does not perform
    any path searching and does not automatically adds extensions. `libname`
    must be the complete file name of the C library, including if necessary
    a path and extension. `funcname` must be the exact name exported by the
    C library (which may depend on the C compiler and linker used).

    This function is not supported by ANSI C. As such, it is only available
    on some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other
    Unix systems that support the `dlfcn` standard).

package.path                                                    *package.path*
    The path used by |require| to search for a Lua loader.

    At start-up, Lua initializes this variable with the value of the
    environment variable `LUA_PATH` or with a default path defined in
    `luaconf.h`, if the environment variable is not defined. Any "`;;`" in
    the value of the environment variable is replaced by the default path.

package.preload                                              *package.preload*
    A table to store loaders for specific modules (see
    |require|).

package.seeall (module)                                       *package.seeall*
    Sets a metatable for `module` with its `__index` field referring to the
    global environment, so that this module inherits values from the global
    environment. To be used as an option to function
    |module|.

==============================================================================
STRING MANIPULATION                                        *lua_module_string*

This library provides generic functions for string manipulation, such as
finding and extracting substrings, and pattern matching. When indexing a
string in Lua, the first character is at position 1 (not at 0, as in C).
Indices are allowed to be negative and are interpreted as indexing
backwards, from the end of the string. Thus, the last character is at
position -1, and so on.

The string library provides all its functions inside the table `string`.
It also sets a metatable for strings where the `__index` field points to
the `string` table. Therefore, you can use the string functions in
object-oriented style. For instance, `string.byte(s, i)` can be written
as `s:byte(i)`.

The string library assumes one-byte character encodings.

string.byte (s [, i [, j]])                                      *string.byte*
    Returns the internal numerical codes of the characters `s[i]`, `s[i+1]`,
    ···, `s[j]`. The default value for `i` is 1; the default value for `j`
    is `i`.

    Note that numerical codes are not necessarily portable across platforms.

string.char (···)                                                *string.char*
    Receives zero or more integers. Returns a string with length equal to
    the number of arguments, in which each character has the internal
    numerical code equal to its corresponding argument.

    Note that numerical codes are not necessarily portable across platforms.

string.dump (function)                                           *string.dump*
    Returns a string containing a binary representation of the given
    function, so that a later |loadstring| on this
    string returns a copy of the function. `function` must be a Lua function
    without upvalues.

string.find (s, pattern [, init [, plain]])                      *string.find*
    Looks for the first match of `pattern` in the string `s`. If it finds a
    match, then `find` returns the indices of `s` where this occurrence
    starts and ends; otherwise, it returns `nil`. A third, optional
    numerical argument `init` specifies where to start the search; its
    default value is 1 and can be negative. A value of `true` as a fourth,
    optional argument `plain` turns off the pattern matching facilities, so
    the function does a plain "find substring" operation, with no characters
    in `pattern` being considered "magic". Note that if `plain` is given,
    then `init` must be given as well.

    If the pattern has captures, then in a successful match the captured
    values are also returned, after the two indices.

string.format (formatstring, ···)                              *string.format*
    Returns a formatted version of its variable number of arguments
    following the description given in its first argument (which must be a
    string). The format string follows the same rules as the `printf` family
    of standard C functions. The only differences are that the
    options/modifiers `*`, `l`, `L`, `n`, `p`, and `h` are not supported and
    that there is an extra option, `q`. The `q` option formats a string in a
    form suitable to be safely read back by the Lua interpreter: the string
    is written between double quotes, and all double quotes, newlines,
    embedded zeros, and backslashes in the string are correctly escaped when
    written. For instance, the call
    >
	     string.format('%q', 'a string with "quotes" and \n new line')
    <
    will produce the string:
    >
	     "a string with \"quotes\" and \
	      new line"
    <
    The options `c`, `d`, `E`, `e`, `f`, `g`, `G`, `i`, `o`, `u`, `X`, and
    `x` all expect a number as argument, whereas `q` and `s` expect a
    string.

    This function does not accept string values containing embedded zeros,
    except as arguments to the `q` option.

string.gmatch (s, pattern)                                     *string.gmatch*
    Returns an iterator function that, each time it is called, returns the
    next captures from `pattern` over string `s`. If `pattern` specifies no
    captures, then the whole match is produced in each call.

    As an example, the following loop
    >
	     s = "hello world from Lua"
	     for w in string.gmatch(s, "%a+") do
	       print(w)
	     end
    <
    will iterate over all the words from string `s`, printing one per line.
    The next example collects all pairs `key`value= from the given string
    into a table:
    >
	     t = {}
	     s = "from=world, to=Lua"
	     for k, v in string.gmatch(s, "(%w+)=(%w+)") do
	       t[k] = v
	     end
    <
    For this function, a '`^`' at the start of a pattern does not work as an
    anchor, as this would prevent the iteration.

string.gsub (s, pattern, repl [, n])                             *string.gsub*
    Returns a copy of `s` in which all (or the first `n`, if given)
    occurrences of the `pattern` have been replaced by a replacement string
    specified by `repl`, which can be a string, a table, or a function.
    `gsub` also returns, as its second value, the total number of matches
    that occurred.

    If `repl` is a string, then its value is used for replacement. The
    character `%` works as an escape character: any sequence in `repl` of
    the form `%n`, with `n` between 1 and 9, stands for the value of the
    `n`-th captured substring (see below). The sequence `%0` stands for the
    whole match. The sequence `%%` stands for a single `%`.

    If `repl` is a table, then the table is queried for every match, using
    the first capture as the key; if the pattern specifies no captures, then
    the whole match is used as the key.

    If `repl` is a function, then this function is called every time a match
    occurs, with all captured substrings passed as arguments, in order; if
    the pattern specifies no captures, then the whole match is passed as a
    sole argument.

    If the value returned by the table query or by the function call is a
    string or a number, then it is used as the replacement string;
    otherwise, if it is `false` or `nil`, then there is no replacement (that
    is, the original match is kept in the string).

    Here are some examples:
    >
	     x = string.gsub("hello world", "(%w+)", "%1 %1")
	     --> x="hello hello world world"

	     x = string.gsub("hello world", "%w+", "%0 %0", 1)
	     --> x="hello hello world"

	     x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
	     --> x="world hello Lua from"

	     x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)
	     --> x="home = `home`roberto, user = roberto"

	     x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)
		   return loadstring(s)()
		 end)
	     --> x="4+5 = 9"

	     local t = {name="lua", version="5.1"}
	     x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)
	     --> x="lua-5.1.tar.gz"
    <
string.len (s)                                                    *string.len*
    Receives a string and returns its length. The empty string `""` has
    length 0. Embedded zeros are counted, so `"a\000bc\000"` has length 5.

string.lower (s)                                                *string.lower*
    Receives a string and returns a copy of this string with all uppercase
    letters changed to lowercase. All other characters are left unchanged.
    The definition of what an uppercase letter is depends on the current
    locale.

string.match (s, pattern [, init])                              *string.match*
    Looks for the first `match` of `pattern` in the string `s`. If it finds
    one, then `match` returns the captures from the pattern; otherwise it
    returns `nil`. If `pattern` specifies no captures, then the whole match
    is returned. A third, optional numerical argument `init` specifies where
    to start the search; its default value is 1 and can be negative.

string.rep (s, n)                                                 *string.rep*
    Returns a string that is the concatenation of `n` copies of the string
    `s`.

string.reverse (s)                                            *string.reverse*
    Returns a string that is the string `s` reversed.

string.sub (s, i [, j])                                           *string.sub*
    Returns the substring of `s` that starts at `i` and continues until `j`;
    `i` and `j` can be negative. If `j` is absent, then it is assumed to be
    equal to -1 (which is the same as the string length). In particular, the
    call `string.sub(s,1,j)` returns a prefix of `s` with length `j`, and
    `string.sub(s, -i)` returns a suffix of `s` with length `i`.

string.upper (s)                                                *string.upper*
    Receives a string and returns a copy of this string with all lowercase
    letters changed to uppercase. All other characters are left unchanged.
    The definition of what a lowercase letter is depends on the current
    locale.

==============================================================================
PATTERNS                                                        *lua_patterns*

Character Class~

A `character class` is used to represent a set of characters. The
following combinations are allowed in describing a character class:

- `x`: (where `x` is not one of the `magic characters` `^$()%.[]*+-?`)
  represents the character `x` itself.
- `.`: (a dot) represents all characters.
- `%a`: represents all letters.
- `%c`: represents all control characters.
- `%d`: represents all digits.
- `%l`: represents all lowercase letters.
- `%p`: represents all punctuation characters.
- `%s`: represents all space characters.
- `%u`: represents all uppercase letters.
- `%w`: represents all alphanumeric characters.
- `%x`: represents all hexadecimal digits.
- `%z`: represents the character with representation 0.
- `%x`: (where `x` is any non-alphanumeric character) represents the
  character `x`. This is the standard way to escape the magic
  characters. Any punctuation character (even the non magic) can be
  preceded by a '`%`' when used to represent itself in a pattern.
- `[set]`: represents the class which is the union of all characters
  in `set`. A range of characters can be specified by separating the end
  characters of the range with a '`-`'. All classes `%x` described
  above can also be used as components in `set`. All other characters in
  `set` represent themselves. For example, `[%w_]` (or `[_%w]`)
  represents all alphanumeric characters plus the underscore, `[0-7]`
  represents the octal digits, and `[0-7%l%-]` represents the octal
  digits plus the lowercase letters plus the '`-`' character.

  The interaction between ranges and classes is not defined. Therefore,
  patterns like `[%a-z]` or `[a-%%]` have no meaning.

- `[^set]`: represents the complement of `set`, where `set` is
  interpreted as above.

For all classes represented by single letters (`%a`, `%c`, etc.), the
corresponding uppercase letter represents the complement of the class.
For instance, `%S` represents all non-space characters.

The definitions of letter, space, and other character groups depend on
the current locale. In particular, the class `[a-z]` may not be
equivalent to `%l`.

Pattern Item~

A `pattern item` can be

- a single character class, which matches any single character in the
  class;
- a single character class followed by '`*`', which matches 0 or more
  repetitions of characters in the class. These repetition items will
  always match the longest possible sequence;
- a single character class followed by '`+`', which matches 1 or more
  repetitions of characters in the class. These repetition items will
  always match the longest possible sequence;
- a single character class followed by '`-`', which also matches 0 or
  more repetitions of characters in the class. Unlike '`*`', these
  repetition items will always match the `shortest` possible sequence;
- a single character class followed by '`?`', which matches 0 or 1
  occurrence of a character in the class;
- `%n`, for `n` between 1 and 9; such item matches a substring equal to
  the `n`-th captured string (see below);
- `%bxy`, where `x` and `y` are two distinct characters; such item
  matches strings that start with `x`, end with `y`, and where the `x`
  and `y` are `balanced`. This means that, if one reads the string from
  left to right, counting /+1/ for an `x` and /-1/ for a `y`, the ending
  `y` is the first `y` where the count reaches 0. For instance, the item
  `%b()` matches expressions with balanced parentheses.

Pattern~

A `pattern` is a sequence of pattern items. A '`^`' at the beginning of
a pattern anchors the match at the beginning of the subject string. A
'`$`' at the end of a pattern anchors the match at the end of the
subject string. At other positions, '`^`' and '`$`' have no special
meaning and represent themselves.

Captures~

A pattern can contain sub-patterns enclosed in parentheses; they
describe `captures`. When a match succeeds, the substrings of the
subject string that match captures are stored (/captured/) for future
use. Captures are numbered according to their left parentheses. For
instance, in the pattern `"(a*(.)%w(%s*))"`, the part of the string
matching `"a*(.)%w(%s*)"` is stored as the first capture (and therefore
has number 1); the character matching "`.`" is captured with number 2,
and the part matching "`%s*`" has number 3.

As a special case, the empty capture `()` captures the current string
position (a number). For instance, if we apply the pattern `"()aa()"` on
the string `"flaaap"`, there will be two captures: 3 and 5.

A pattern cannot contain embedded zeros. Use `%z` instead.

==============================================================================
TABLE MANIPULATION                                          *lua_module_table*

This library provides generic functions for table manipulation. It
provides all its functions inside the table `table`.

Most functions in the table library assume that the table represents an
array or a list. For these functions, when we talk about the "length" of
a table we mean the result of the length operator.

table.concat (table [, sep [, i [, j]]])                        *table.concat*
    Given an array where all elements are strings or numbers, returns
    `table[i]..sep..table[i+1] ··· sep..table[j]`. The default value for
    `sep` is the empty string, the default for `i` is 1, and the default for
    `j` is the length of the table. If `i` is greater than `j`, returns the
    empty string.

table.insert (table, [pos,] value)                              *table.insert*
    Inserts element `value` at position `pos` in `table`, shifting up other
    elements to open space, if necessary. The default value for `pos` is
    `n+1`, where `n` is the length of the table (see |lua_len|), so
    that a call `table.insert(t,x)` inserts `x` at the end of table `t`.

table.maxn (table)                                                *table.maxn*
    Returns the largest positive numerical index of the given table, or zero
    if the table has no positive numerical indices. (To do its job this
    function does a linear traversal of the whole table.)

table.remove (table [, pos])                                    *table.remove*
    Removes from `table` the element at position `pos`, shifting down other
    elements to close the space, if necessary. Returns the value of the
    removed element. The default value for `pos` is `n`, where `n` is the
    length of the table, so that a call `table.remove(t)` removes the last
    element of table `t`.

table.sort (table [, comp])                                       *table.sort*
    Sorts table elements in a given order, `in-place`, from `table[1]` to
    `table[n]`, where `n` is the length of the table. If `comp` is given,
    then it must be a function that receives two table elements, and returns
    true when the first is less than the second (so that
    `not comp(a[i+1],a[i])` will be true after the sort). If `comp` is not
    given, then the standard Lua operator `<` is used instead.

    The sort algorithm is not stable; that is, elements considered equal by
    the given order may have their relative positions changed by the sort.

==============================================================================
MATHEMATICAL FUNCTIONS                                       *lua_module_math*

This library is an interface to the standard C math library. It provides
all its functions inside the table `math`.

math.abs (x)                                                        *math.abs*
    Returns the absolute value of `x`.

math.acos (x)                                                      *math.acos*
    Returns the arc cosine of `x` (in radians).

math.asin (x)                                                      *math.asin*
    Returns the arc sine of `x` (in radians).

math.atan (x)                                                      *math.atan*
    Returns the arc tangent of `x` (in radians).

math.atan2 (y, x)                                                 *math.atan2*
    Returns the arc tangent of `y/x` (in radians), but uses the signs of
    both parameters to find the quadrant of the result. (It also handles
    correctly the case of `x` being zero.)

math.ceil (x)                                                      *math.ceil*
    Returns the smallest integer larger than or equal to `x`.

math.cos (x)                                                        *math.cos*
    Returns the cosine of `x` (assumed to be in radians).

math.cosh (x)                                                      *math.cosh*
    Returns the hyperbolic cosine of `x`.

math.deg (x)                                                        *math.deg*
    Returns the angle `x` (given in radians) in degrees.

math.exp (x)                                                        *math.exp*
    Returns the value `e^{x}`.

math.floor (x)                                                    *math.floor*
    Returns the largest integer smaller than or equal to `x`.

math.fmod (x, y)                                                   *math.fmod*
    Returns the remainder of the division of `x` by `y` that rounds the
    quotient towards zero.

math.frexp (x)                                                    *math.frexp*
    Returns `m` and `e` such that `x = m2^{e}`, `e` is an integer and the
    absolute value of `m` is in the range /[0.5, 1)/ (or zero when `x` is
    zero).

math.huge                                                          *math.huge*
    The value `HUGE_VAL`, a value larger than or equal to any other
    numerical value.

math.ldexp (m, e)                                                 *math.ldexp*
    Returns `m2^{e}` (`e` should be an integer).

math.log (x)                                                        *math.log*
    Returns the natural logarithm of `x`.

math.log10 (x)                                                    *math.log10*
    Returns the base-10 logarithm of `x`.

math.max (x, ···)                                                   *math.max*
    Returns the maximum value among its arguments.

math.min (x, ···)                                                   *math.min*
    Returns the minimum value among its arguments.

math.modf (x)                                                      *math.modf*
    Returns two numbers, the integral part of `x` and the fractional part of
    `x`.

math.pi                                                              *math.pi*
    The value of `pi`.

math.pow (x, y)                                                     *math.pow*
    Returns `x^{y}`. (You can also use the expression `x^y` to compute this
    value.)

math.rad (x)                                                        *math.rad*
    Returns the angle `x` (given in degrees) in radians.

math.random ([m [, n]])                                          *math.random*
    This function is an interface to the simple pseudo-random generator
    function `rand` provided by ANSI C. (No guarantees can be given for its
    statistical properties.)

    When called without arguments, returns a uniform pseudo-random real
    number in the range /[0,1)/. When called with an integer number `m`,
    `math.random` returns a uniform pseudo-random integer in the range /[1,
    m]/. When called with two integer numbers `m` and `n`, `math.random`
    returns a uniform pseudo-random integer in the range /[m, n]/.

math.randomseed (x)                                          *math.randomseed*
    Sets `x` as the "seed" for the pseudo-random generator: equal seeds
    produce equal sequences of numbers.

math.sin (x)                                                        *math.sin*
    Returns the sine of `x` (assumed to be in radians).

math.sinh (x)                                                      *math.sinh*
    Returns the hyperbolic sine of `x`.

math.sqrt (x)                                                      *math.sqrt*
    Returns the square root of `x`. (You can also use the expression `x^0.5`
    to compute this value.)

math.tan (x)                                                        *math.tan*
    Returns the tangent of `x` (assumed to be in radians).

math.tanh (x)                                                      *math.tanh*
    Returns the hyperbolic tangent of `x`.

==============================================================================
INPUT AND OUTPUT FACILITIES                                    *lua_module_io*

The I/O library provides two different styles for file manipulation. The
first one uses implicit file descriptors; that is, there are operations
to set a default input file and a default output file, and all
input/output operations are over these default files. The second style
uses explicit file descriptors.

When using implicit file descriptors, all operations are supplied by
table `io`. When using explicit file descriptors, the operation
|io.open| returns a file descriptor and then all
operations are supplied as methods of the file descriptor.

The table `io` also provides three predefined file descriptors with
their usual meanings from C: `io.stdin`, `io.stdout`, and `io.stderr`.
The I/O library never closes these files.

Unless otherwise stated, all I/O functions return `nil` on failure (plus
an error message as a second result and a system-dependent error code as
a third result) and some value different from `nil` on success.

io.close ([file])                                                   *io.close*
    Equivalent to `file:close()`. Without a `file`, closes the default
    output file.

io.flush ()                                                         *io.flush*
    Equivalent to `file:flush` over the default output file.

io.input ([file])                                                   *io.input*
    When called with a file name, it opens the named file (in text mode),
    and sets its handle as the default input file. When called with a file
    handle, it simply sets this file handle as the default input file. When
    called without parameters, it returns the current default input file.

    In case of errors this function raises the error, instead of returning
    an error code.

io.lines ([filename])                                               *io.lines*
    Opens the given file name in read mode and returns an iterator function
    that, each time it is called, returns a new line from the file.
    Therefore, the construction
    >
	     for line in io.lines(filename) do body end
    <
    will iterate over all lines of the file. When the iterator function
    detects the end of file, it returns `nil` (to finish the loop) and
    automatically closes the file.

    The call `io.lines()` (with no file name) is equivalent to
    `io.input():lines()`; that is, it iterates over the lines of the default
    input file. In this case it does not close the file when the loop ends.

io.open (filename [, mode])                                          *io.open*
    This function opens a file, in the mode specified in the string `mode`.
    It returns a new file handle, or, in case of errors, `nil` plus an error
    message.

    The `mode` string can be any of the following:

    - `r`: read mode (the default);
    - `w`: write mode;
    - `a`: append mode;
    - `r+`: update mode, all previous data is preserved;
    - `w+`: update mode, all previous data is erased;
    - `a+`: append update mode, previous data is preserved, writing is
      only allowed at the end of file.

    The `mode` string can also have a '`b`' at the end, which is needed in
    some systems to open the file in binary mode. This string is exactly
    what is used in the standard C function `fopen`.

io.output ([file])                                                 *io.output*
    Similar to |io.input|, but operates over the default
    output file.

io.popen (prog [, mode])                                            *io.popen*
    Starts program `prog` in a separated process and returns a file handle
    that you can use to read data from this program (if `mode` is `"r"`, the
    default) or to write data to this program (if `mode` is `"w"`).

    This function is system dependent and is not available on all platforms.

io.read (···)                                                        *io.read*
    Equivalent to `io.input():read`.

io.tmpfile ()                                                     *io.tmpfile*
    Returns a handle for a temporary file. This file is opened in update
    mode and it is automatically removed when the program ends.

io.type (obj)                                                        *io.type*
    Checks whether `obj` is a valid file handle. Returns the string `"file"`
    if `obj` is an open file handle, `"closed file"` if `obj` is a closed
    file handle, or `nil` if `obj` is not a file handle.

io.write (···)                                                      *io.write*
    Equivalent to `io.output():write`.

file:close ()                                                     *file:close*
    Closes `file`. Note that files are automatically closed when their
    handles are garbage collected, but that takes an unpredictable amount of
    time to happen.

file:flush ()                                                     *file:flush*
    Saves any written data to `file`.

file:lines ()                                                     *file:lines*
    Returns an iterator function that, each time it is called, returns a new
    line from the file. Therefore, the construction
    >
	     for line in file:lines() do body end
    <
    will iterate over all lines of the file. (Unlike
    |io.lines|, this function does not close the file
    when the loop ends.)

file:read (···)                                                    *file:read*
    Reads the file `file`, according to the given formats, which specify
    what to read. For each format, the function returns a string (or a
    number) with the characters read, or `nil` if it cannot read data with
    the specified format. When called without formats, it uses a default
    format that reads the entire next line (see below).

    The available formats are

    - `*n`: reads a number; this is the only format that returns a number
      instead of a string.
    - `*a`: reads the whole file, starting at the current position. On end
      of file, it returns the empty string.
    - `*l`: reads the next line (skipping the end of line), returning
      `nil` on end of file. This is the default format.
    - `number`: reads a string with up to this number of characters,
      returning `nil` on end of file. If number is zero, it reads nothing
      and returns an empty string, or `nil` on end of file.

file:seek ([whence] [, offset])                                    *file:seek*
    Sets and gets the file position, measured from the beginning of the
    file, to the position given by `offset` plus a base specified by the
    string `whence`, as follows:

    - `set`: base is position 0 (beginning of the file);
    - `cur`: base is current position;
    - `end`: base is end of file;

    In case of success, function `seek` returns the final file position,
    measured in bytes from the beginning of the file. If this function
    fails, it returns `nil`, plus a string describing the error.

    The default value for `whence` is `"cur"`, and for `offset` is 0.
    Therefore, the call `file:seek()` returns the current file position,
    without changing it; the call `file:seek("set")` sets the position to
    the beginning of the file (and returns 0); and the call
    `file:seek("end")` sets the position to the end of the file, and returns
    its size.

file:setvbuf (mode [, size])                                    *file:setvbuf*
    Sets the buffering mode for an output file. There are three available
    modes:

    - `no`: no buffering; the result of any output operation appears
      immediately.
    - `full`: full buffering; output operation is performed only when the
      buffer is full (or when you explicitly `flush` the file (see
      |io.flush|)).
    - `line`: line buffering; output is buffered until a newline is output
      or there is any input from some special files (such as a terminal
      device).

    For the last two cases, `size` specifies the size of the buffer, in
    bytes. The default is an appropriate size.

file:write (···)                                                  *file:write*
    Writes the value of each of its arguments to the `file`. The arguments
    must be strings or numbers. To write other values, use
    |tostring| or |string.format|
    before `write`.

==============================================================================
OPERATING SYSTEM FACILITIES                                    *lua_module_os*

This library is implemented through table `os`.

os.clock ()                                                         *os.clock*
    Returns an approximation of the amount in seconds of CPU time used by
    the program.

os.date ([format [, time]])                                          *os.date*
    Returns a string or a table containing date and time, formatted
    according to the given string `format`.

    If the `time` argument is present, this is the time to be formatted (see
    the |os.time| function for a description of this
    value). Otherwise, `date` formats the current time.

    If `format` starts with '`!`', then the date is formatted in Coordinated
    Universal Time. After this optional character, if `format` is the string
    "`*t`", then `date` returns a table with the following fields: `year`
    (four digits), `month` (1--12), `day` (1--31), `hour` (0--23), `min`
    (0--59), `sec` (0--61), `wday` (weekday, Sunday is 1), `yday` (day of
    the year), and `isdst` (daylight saving flag, a boolean).

    If `format` is not "`*t`", then `date` returns the date as a string,
    formatted according to the same rules as the C function `strftime`.

    When called without arguments, `date` returns a reasonable date and time
    representation that depends on the host system and on the current locale
    (that is, `os.date()` is equivalent to `os.date("%c")`).

os.difftime (t2, t1)                                             *os.difftime*
    Returns the number of seconds from time `t1` to time `t2`. In POSIX,
    Windows, and some other systems, this value is exactly `t2`/-/=t1=.

os.execute ([command])                                            *os.execute*
    This function is equivalent to the C function `system`. It passes
    `command` to be executed by an operating system shell. It returns a
    status code, which is system-dependent. If `command` is absent, then it
    returns nonzero if a shell is available and zero otherwise.

os.exit ([code])                                                     *os.exit*
    Calls the C function `exit`, with an optional `code`, to terminate the
    host program. The default value for `code` is the success code.

os.getenv (varname)                                                *os.getenv*
    Returns the value of the process environment variable `varname`, or
    `nil` if the variable is not defined.

os.remove (filename)                                               *os.remove*
    Deletes the file or directory with the given name. Directories must be
    empty to be removed. If this function fails, it returns `nil`, plus a
    string describing the error.

os.rename (oldname, newname)                                       *os.rename*
    Renames file or directory named `oldname` to `newname`. If this function
    fails, it returns `nil`, plus a string describing the error.

os.setlocale (locale [, category])                              *os.setlocale*
    Sets the current locale of the program. `locale` is a string specifying
    a locale; `category` is an optional string describing which category to
    change: `"all"`, `"collate"`, `"ctype"`, `"monetary"`, `"numeric"`, or
    `"time"`; the default category is `"all"`. The function returns the name
    of the new locale, or `nil` if the request cannot be honored.

    If `locale` is the empty string, the current locale is set to an
    implementation-defined native locale. If `locale` is the string "`C`",
    the current locale is set to the standard C locale.

    When called with `nil` as the first argument, this function only returns
    the name of the current locale for the given category.

os.time ([table])                                                    *os.time*
    Returns the current time when called without arguments, or a time
    representing the date and time specified by the given table. This table
    must have fields `year`, `month`, and `day`, and may have fields `hour`,
    `min`, `sec`, and `isdst` (for a description of these fields, see the
    |os.date| function).

    The returned value is a number, whose meaning depends on your system. In
    POSIX, Windows, and some other systems, this number counts the number of
    seconds since some given start time (the "epoch"). In other systems, the
    meaning is not specified, and the number returned by `time` can be used
    only as an argument to `date` and `difftime`.

os.tmpname ()                                                     *os.tmpname*
    Returns a string with a file name that can be used for a temporary file.
    The file must be explicitly opened before its use and explicitly removed
    when no longer needed.

    On some systems (POSIX), this function also creates a file with that
    name, to avoid security risks. (Someone else might create the file with
    wrong permissions in the time between getting the name and creating the
    file.) You still have to open the file to use it and to remove it (even
    if you do not use it).

    When possible, you may prefer to use |io.tmpfile|,
    which automatically removes the file when the program ends.

==============================================================================
THE DEBUG LIBRARY                                                  *lua_debug*

This library provides the functionality of the debug interface to Lua
programs. You should exert care when using this library. The functions
provided here should be used exclusively for debugging and similar
tasks, such as profiling. Please resist the temptation to use them as a
usual programming tool: they can be very slow. Moreover, several of
these functions violate some assumptions about Lua code (e.g., that
variables local to a function cannot be accessed from outside or that
userdata metatables cannot be changed by Lua code) and therefore can
compromise otherwise secure code.

All functions in this library are provided inside the `debug` table. All
functions that operate over a thread have an optional first argument
which is the thread to operate over. The default is always the current
thread.

debug.debug ()                                                   *debug.debug*
    Enters an interactive mode with the user, running each string that the
    user enters. Using simple commands and other debug facilities, the user
    can inspect global and local variables, change their values, evaluate
    expressions, and so on. A line containing only the word `cont` finishes
    this function, so that the caller continues its execution.

    Note that commands for `debug.debug` are not lexically nested within any
    function, and so have no direct access to local variables.

debug.getfenv (o)                                              *debug.getfenv*
    Returns the environment of object `o`.

debug.gethook ([thread])                                       *debug.gethook*
    Returns the current hook settings of the thread, as three values: the
    current hook function, the current hook mask, and the current hook count
    (as set by the |debug.sethook| function).

debug.getinfo ([thread,] function [, what])                    *debug.getinfo*
    Returns a table with information about a function. You can give the
    function directly, or you can give a number as the value of `function`,
    which means the function running at level `function` of the call stack
    of the given thread: level 0 is the current function (`getinfo` itself);
    level 1 is the function that called `getinfo`; and so on. If `function`
    is a number larger than the number of active functions, then `getinfo`
    returns `nil`.

    The returned table can contain all the fields returned by
    |lua_getinfo|, with the string `what` describing which
    fields to fill in. The default for `what` is to get all information
    available, except the table of valid lines. If present, the option '`f`'
    adds a field named `func` with the function itself. If present, the
    option '`L`' adds a field named `activelines` with the table of valid
    lines.

    For instance, the expression `debug.getinfo(1,"n").name` returns a table
    with a name for the current function, if a reasonable name can be found,
    and the expression `debug.getinfo(print)` returns a table with all
    available information about the |print| function.

debug.getlocal ([thread,] level, local)                       *debug.getlocal*
    This function returns the name and the value of the local variable with
    index `local` of the function at level `level` of the stack. (The first
    parameter or local variable has index 1, and so on, until the last
    active local variable.) The function returns `nil` if there is no local
    variable with the given index, and raises an error when called with a
    `level` out of range. (You can call
    |debug.getinfo| to check whether the level is
    valid.)

    Variable names starting with '`(`' (open parentheses) represent internal
    variables (loop control variables, temporaries, and C function locals).

debug.getmetatable (object)                               *debug.getmetatable*
    Returns the metatable of the given `object` or `nil` if it does not have
    a metatable.

debug.getregistry ()                                       *debug.getregistry*
    Returns the registry table (see https://www.lua.org/manual/5.1/manual.html#3.5).

debug.getupvalue (func, up)                                 *debug.getupvalue*
    This function returns the name and the value of the upvalue with index
    `up` of the function `func`. The function returns `nil` if there is no
    upvalue with the given index.

debug.setfenv (object, table)                                  *debug.setfenv*
    Sets the environment of the given `object` to the given `table`. Returns
    `object`.

debug.sethook ([thread,] hook, mask [, count])                 *debug.sethook*
    Sets the given function as a hook. The string `mask` and the number
    `count` describe when the hook will be called. The string mask may have
    the following characters, with the given meaning:

    - `"c"`: the hook is called every time Lua calls a function;
    - `"r"`: the hook is called every time Lua returns from a function;
    - `"l"`: the hook is called every time Lua enters a new line of code.

    With a `count` different from zero, the hook is called after every
    `count` instructions.

    When called without arguments, |debug.sethook|
    turns off the hook.

    When the hook is called, its first parameter is a string describing the
    event that has triggered its call: `"call"`, `"return"` (or
    `"tail return"`, when simulating a return from a tail call), `"line"`,
    and `"count"`. For line events, the hook also gets the new line number
    as its second parameter. Inside a hook, you can call `getinfo` with
    level 2 to get more information about the running function (level 0 is
    the `getinfo` function, and level 1 is the hook function), unless the
    event is `"tail return"`. In this case, Lua is only simulating the
    return, and a call to `getinfo` will return invalid data.

debug.setlocal ([thread,] level, local, value)                *debug.setlocal*
    This function assigns the value `value` to the local variable with index
    `local` of the function at level `level` of the stack. The function
    returns `nil` if there is no local variable with the given index, and
    raises an error when called with a `level` out of range. (You can call
    `getinfo` to check whether the level is valid.) Otherwise, it returns
    the name of the local variable.

debug.setmetatable (object, table)                        *debug.setmetatable*
    Sets the metatable for the given `object` to the given `table` (which
    can be `nil`).

debug.setupvalue (func, up, value)                          *debug.setupvalue*
    This function assigns the value `value` to the upvalue with index `up`
    of the function `func`. The function returns `nil` if there is no
    upvalue with the given index. Otherwise, it returns the name of the
    upvalue.

debug.traceback ([thread,] [message [, level]])              *debug.traceback*
    Returns a string with a traceback of the call stack. An optional
    `message` string is appended at the beginning of the traceback. An
    optional `level` number tells at which level to start the traceback
    (default is 1, the function calling `traceback`).

==============================================================================
THE COMPLETE SYNTAX OF LUA                                        *lua_syntax*

Here is the complete syntax of Lua in extended BNF. (It does not
describe operator precedences.)
>

        chunk ::= {stat [`;´]} [laststat [`;´]]

        block ::= chunk

        stat ::=  varlist `=´ explist | 
             functioncall | 
             do block end | 
             while exp do block end | 
             repeat block until exp | 
             if exp then block {elseif exp then block} [else block] end | 
             for Name `=´ exp `,´ exp [`,´ exp] do block end | 
             for namelist in explist do block end | 
             function funcname funcbody | 
             local function Name funcbody | 
             local namelist [`=´ explist] 

        laststat ::= return [explist] | break

        funcname ::= Name {`.´ Name} [`:´ Name]

        varlist ::= var {`,´ var}

        var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name 

        namelist ::= Name {`,´ Name}

        explist ::= {exp `,´} exp

        exp ::=  nil | false | true | Number | String | `...´ | function | 
             prefixexp | tableconstructor | exp binop exp | unop exp 

        prefixexp ::= var | functioncall | `(´ exp `)´

        functioncall ::=  prefixexp args | prefixexp `:´ Name args 

        args ::=  `(´ [explist] `)´ | tableconstructor | String 

        function ::= function funcbody

        funcbody ::= `(´ [parlist] `)´ block end

        parlist ::= namelist [`,´ `...´] | `...´

        tableconstructor ::= `{´ [fieldlist] `}´

        fieldlist ::= field {fieldsep field} [fieldsep]

        field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp

        fieldsep ::= `,´ | `;´

        binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | 
             `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ | 
             and | or

        unop ::= `-´ | not | `#´
<
Last update: Thu Aug 29 20:43:58 UTC 2019
